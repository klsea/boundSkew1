d1 <- subset(d0, SubjectID %in% subjects)[c(1,1256:1259)]
d1$dAMPH_90_175 <- (d1$dAMPH_90 + d1$dAMPH_175)/2
dt <- merge(d2, d1[c(1,6)], by.x = 'Subject', by.y = 'SubjectID')
rm(d0, subjects, d1, d2)
d2 <- read.csv('~/R_Projects/dndtwostep/data/41subsDND.csv')
d2$Subject <- paste0('DND', formatC(d2$Subject, width = 3, format = "d", flag = "0"))
d0 <- read.csv('~/R_Projects/dndtwostep/data/DND_Complete.csv')
subjects <- unique(d2$Subject)
d1 <- subset(d0, SubjectID %in% subjects)[c(1,1256:1259)]
d1$dAMPH_90_175 <- (d1$dAMPH_90 + d1$dAMPH_175)/2
dt <- merge(d2, d1[c(1,6)], by.x = 'Subject', by.y = 'SubjectID')
rm(d0, subjects, d1, d2)
dt <- read.csv('~/Desktop/Psy 230/coglabs/StatLearning_class.csv')
View(dt)
# individual diff graphs
ggplot(dt, aes(x = reorder(Student, A.vs..P), y = A.vs..P)) + geom_bar(stat='identity') +
ylab('Reaction Time Difference') + xlab ('Students') + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
library(ggplot2); library(reshape2)
dt <- read.csv('~/Desktop/Psy 230/coglabs/StatLearning_class.csv')
# individual diff graphs
ggplot(dt, aes(x = reorder(Student, A.vs..P), y = A.vs..P)) + geom_bar(stat='identity') +
ylab('Reaction Time Difference') + xlab ('Students') + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# individual diff graphs
ggplot(dt, aes(x = reorder(Student, A.vs..P), y = A.vs..P)) + geom_bar(stat='identity') +
ylab('Accuracy for Always vs. Impossible') + xlab ('Students') + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# individual diff graphs
ggplot(dt, aes(x = reorder(Student, A.vs..P), y = A.vs..P)) + geom_bar(stat='identity', fill = blue) +
ylab('Accuracy for Always vs. Impossible') + xlab ('Students') + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# individual diff graphs
ggplot(dt, aes(x = reorder(Student, A.vs..P), y = A.vs..P)) + geom_bar(stat='identity', fill = "blue") +
ylab('Accuracy for Always vs. Impossible') + xlab ('Students') + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# overall graphs
d1 <- colMeans(dt[3:5])
# overall graphs
cnames <- colnames(dt)
# overall graphs
cnames <- colnames(dt)[3:5]
# overall graphs
cnames <- c('Always vs. Impossible', 'Always vs. Possible', 'Possible vs. Impossible')
colnames(d1) <- cnames
d1 <- as.data.frame(colMeans(dt[3:5]))
colnames(d1) <- c('Always vs. Impossible', 'Always vs. Possible', 'Possible vs. Impossible')
View(d1)
# overall graphs
d1 <- as.data.frame(t(colMeans(dt[3:5])))
View(d1)
colnames(d1) <- c('Always vs. Impossible', 'Always vs. Possible', 'Possible vs. Impossible')
View(d1)
# overall graphs
d1 <- as.data.frame(colMeans(dt[3:5]))
d1$tt <- c('Always vs. Impossible', 'Always vs. Possible', 'Possible vs. Impossible')
View(d1)
# overall graphs
d1$Accuracy <- as.data.frame(colMeans(dt[3:5]))
# overall graphs
d1$Accuracy <- colMeans(dt[3:5])
d1$tt <- c('Always vs. Impossible', 'Always vs. Possible', 'Possible vs. Impossible')
rm(d1)
# overall graphs
d1$Accuracy <- colMeans(dt[3:5])
d1$tt <- c('Always vs. Impossible', 'Always vs. Possible', 'Possible vs. Impossible')
# overall graphs
d1 <- data.frame(Accuracy=numeric(), tt=character())
d1$Accuracy <- colMeans(dt[3:5])
d1$tt <- c('Always vs. Impossible', 'Always vs. Possible', 'Possible vs. Impossible')
View(d1)
# overall graphs
d1 <- data.frame()
d1$tt <- c('Always vs. Impossible', 'Always vs. Possible', 'Possible vs. Impossible')
# overall graphs
d1 <- data.frame(tt=c('Always vs. Impossible', 'Always vs. Possible', 'Possible vs. Impossible'), Accuracy = colMeans(dt[3:5]))
View(d1)
# overall graphs
d1 <- data.frame(TT=c('Always vs. Impossible', 'Always vs. Possible', 'Possible vs. Impossible'), Accuracy = colMeans(dt[3:5]))
ggplot(dt, aes(x = TT, y = Accuracy)) + geom_bar(stat='identity', fill = "red") +
ylab('Accuracy for Always vs. Impossible') + xlab ('Students') + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(d1, aes(x = TT, y = Accuracy)) + geom_bar(stat='identity', fill = "red") +
ylab('Accuracy for Always vs. Impossible') + xlab ('Students') + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
library(ggplot2); library(reshape2); library(matrixStats)
# overall graphs
d1 <- data.frame(TT=c('Always vs. Impossible', 'Always vs. Possible', 'Possible vs. Impossible'),
Accuracy = colMeans(dt[3:5]),
se = colSds(dt[3:5]))
View(d1)
# overall graphs
d1 <- data.frame(TT=c('Always vs. Impossible', 'Always vs. Possible', 'Possible vs. Impossible'),
Accuracy = colMeans(dt[3:5]),
se = colSds(dt[3:5]))
d1$se <- colSds(dt[3:5])
dt[3:5]
d1$se <- colSds(as.matrix(dt[3:5]))
View(d1)
length(dt)
nrow(dt)
sqrt(38)
d1$se <- colSds(as.matrix(dt[3:5]))/sqrt(nrow(dt))
View(d1)
# overall graphs
d1 <- data.frame(TT=c('Always vs. Impossible', 'Always vs. Possible', 'Possible vs. Impossible'),
Accuracy = colMeans(dt[3:5]),
se = colSds(as.matrix(dt[3:5]))/sqrt(nrow(dt)))
ggplot(d1, aes(x = TT, y = Accuracy)) + geom_bar(stat='identity', fill = "red") +
ylab('Accuracy for Always vs. Impossible') + xlab ('Students') +
geom_errorbar(aes(ymin = Accuracy - se, ymax = Accuracy + se), colour = 'black', width = 0.1) +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
ggplot(d1, aes(x = TT, y = Accuracy)) + geom_bar(stat='identity', fill = TT) +
ylab('Accuracy for Always vs. Impossible') + xlab ('Students') +
geom_errorbar(aes(ymin = Accuracy - se, ymax = Accuracy + se), colour = 'black', width = 0.1) +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
ggplot(d1, aes(x = TT, y = Accuracy, fill = TT)) + geom_bar(stat='identity') +
ylab('Accuracy for Always vs. Impossible') + xlab ('Students') +
geom_errorbar(aes(ymin = Accuracy - se, ymax = Accuracy + se), colour = 'black', width = 0.1) +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
ggplot(d1, aes(x = TT, y = Accuracy, fill = TT)) + geom_bar(stat='identity') +
ylab('Accuracy for Always vs. Impossible') + xlab ('Students') +
geom_errorbar(aes(ymin = Accuracy - se, ymax = Accuracy + se), colour = 'black', width = 0.1) +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), legend.position = 'none')
ggplot(d1, aes(x = TT, y = Accuracy, fill = TT)) + geom_bar(stat='identity') +
ylab('Accuracy for Always vs. Impossible') + xlab ('Students') +
geom_errorbar(aes(ymin = Accuracy - se, ymax = Accuracy + se), colour = 'black', width = 0.1) +
theme(legend.position = 'none')
ggplot(d1, aes(x = TT, y = Accuracy, fill = TT)) + geom_bar(stat='identity') +
ylab('Accuracy') + xlab ('Triplet Type Comparison') +
geom_errorbar(aes(ymin = Accuracy - se, ymax = Accuracy + se), colour = 'black', width = 0.1) +
theme(legend.position = 'none')
View(d1)
d1 <- d1[c(1,3,2),]
View(d1)
ggplot(d1, aes(x = TT, y = Accuracy, fill = TT)) + geom_bar(stat='identity') +
ylab('Accuracy') + xlab ('Triplet Type Comparison') +
geom_errorbar(aes(ymin = Accuracy - se, ymax = Accuracy + se), colour = 'black', width = 0.1) +
theme(legend.position = 'none')
View(d1)
View(d1)
d1$TT <- factor(d1$TT, levels = c('Always vs. Impossible', 'Possible vs. Impossible', 'Always vs. Possible'))
ggplot(d1, aes(x = TT, y = Accuracy, fill = TT)) + geom_bar(stat='identity') +
ylab('Accuracy') + xlab ('Triplet Type Comparison') +
geom_errorbar(aes(ymin = Accuracy - se, ymax = Accuracy + se), colour = 'black', width = 0.1) +
theme(legend.position = 'none')
library(ggplot2); library(reshape2); library(matrixStats)
dt <- read.csv('~/Desktop/Psy 230/coglabs/StatLearning_class.csv')
# individual diff graphs
ggplot(dt, aes(x = reorder(Student, A.vs..P), y = A.vs..P)) + geom_bar(stat='identity', fill = "red") +
ylab('Accuracy for Always vs. Impossible') + xlab ('Students') + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# overall graphs
d1 <- data.frame(TT=c('Always vs. Impossible', 'Always vs. Possible', 'Possible vs. Impossible'),
Accuracy = colMeans(dt[3:5]),
se = colSds(as.matrix(dt[3:5]))/sqrt(nrow(dt)))
d1$TT <- factor(d1$TT, levels = c('Always vs. Impossible', 'Possible vs. Impossible', 'Always vs. Possible'))
ggplot(d1, aes(x = TT, y = Accuracy, fill = TT)) + geom_bar(stat='identity') +
ylab('Accuracy') + xlab ('Triplet Type Comparison') +
geom_errorbar(aes(ymin = Accuracy - se, ymax = Accuracy + se), colour = 'black', width = 0.1) +
theme(legend.position = 'none')
install.packages('kableExtra')
install.packages('readStata13')
install.packages('readstata13')
dt <- read.dta13('~/Desktop/new_SV_dta.dta')
library(readstata13)
dt <- read.dta13('~/Desktop/new_SV_dta.dta')
View(dt)
source('~/Dropbox (Personal)/Functions/pcorTableCI.R')
View(pcorTableCI)
age <- dt$age
grep('age', dt)
grep('age', colnames(dt))
grep('delayed', colnames(dt))
data <- dt[c(2:17, 19:)]
grep('total', colnames(dt))
grep('trail', colnames(dt))
grep('stiatum', colnames(dt))
grep('striatum', colnames(dt))
data <- dt[c(2:17, 23, 26:28, 30, 35)]
View(data)
pcorTableCI(data, age)
table <- pcorTableCI(data, age)
View(table)
#make data
delay <- c(1, 6, 12, 36, 60, 120)
value <- c(.9, .77, .5, .25, .2)
dt <- cbind(delay, value)
library(ggplot2)
ggplot(dt, aes(delay, value))
dt <- as.data.frame(cbind(delay, value))
library(ggplot2)
ggplot(dt, aes(delay, value))
ggplot(dt, aes(delay, value)) + geom_point(stat='identity')
#make data
delay <- c(1, 6, 12, 36, 60, 120)
value <- c(.9, .77, .5, .38, .25, .2)
dt <- as.data.frame(cbind(delay, value))
library(ggplot2)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity')
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + geom_smooth()
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_contour()
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_smooth(method = 'lm')
hyperfun <- function(x) { 1 / x}
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun)
hyperfun <- function(x) { 1 / x *0.1}
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun)
hyperfun <- function(x) { 1 / x *0.01}
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun)
hyperfun <- function(x) { 1 / x *0.5}
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun)
hyperfun <- function(x) { 1 / 1 + x*0.5}
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun)
hyperfun <- function(x) { 1 / (1 + x*0.5)}
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun)
hyperfun <- function(x) { 1 / (1 + x*0.75)}
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun)
hyperfun <- function(x) { 1 / (1 + x*0.75)}
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun)
hyperfun <- function(x) { 1 / (1 + x*1.1)}
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun)
fit1 <- lm(y ~ 1 /x)
fit1 <- lm(dt, value ~ 1 /delay)
fit1 <- lm(dt, value ~ delay)
fit1 <- lm(value ~ delay)
View(fit1)
hyperfun <- function(x) { 1 / (1 + x*.01)}
fit1 <- lm(value ~ delay)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun)
hyperfun <- function(x) { 1 / (1 + x*.015)}
fit1 <- lm(value ~ delay)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun)
hyperfun <- function(x) { 1 / (1 + x*.02)}
fit1 <- lm(value ~ delay)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun)
hyperfun <- function(x) { 1 / (1 + x*.05)}
fit1 <- lm(value ~ delay)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun)
hyperfun <- function(x) { 1 / (1 + x*.06)}
fit1 <- lm(value ~ delay)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n Proportion of Objective Value')
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120))
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120))
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0))
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
hyperfun <- function(x) { 1 / (1 + x*.055)}
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
hyperfun <- function(x) { 1 / (1 + x*.053)}
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
hyperfun <- function(x) { 1 / (1 + x*.05)}
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
ggplot(dt, aes(delay, value), color = delay) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
ggplot(dt, aes(delay, value), color = delay) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', aes(color = delay)) + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
View(dt)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity')) + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
hyperfun <- function(x) { 1 / (1 + x*.05)}
ggplot(dt, aes(delay, value)) + geom_point(stat='identity')) + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
hyperfun <- function(x) { 1 / (1 + x*.05)}
ggplot(dt, aes(delay, value)) + geom_point(stat='identity')) + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120), size = 16) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = element_text(size = 16))
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = element_text(size = 16), axis.title.y = element_text(size = 16))
set_text <- element_text(size = 16)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 16) + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 10) + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 5) + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 4) + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 3) + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 3) + stat_function(fun = hyperfun, size = 2) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 3) + stat_function(fun = hyperfun, size = 1) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 3, fill = red) + stat_function(fun = hyperfun, size = 1) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 3, fill = 'red') + stat_function(fun = hyperfun, size = 1) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 3, colour = 'red') + stat_function(fun = hyperfun, size = 1) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
set_text <- element_text(size = 24)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 3, colour = 'red') + stat_function(fun = hyperfun, size = 1) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 3, colour = 'red') + stat_function(fun = hyperfun, size = 1) +
xlab('Delay (in months)') + ylab('Subjective Value') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
set_text <- element_text(size = 20)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 3, colour = 'red') + stat_function(fun = hyperfun, size = 1) +
xlab('Delay (in months)') + ylab('Subjective Value') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
set_text <- element_text(size = 24)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 3, colour = 'red') + stat_function(fun = hyperfun, size = 1) +
xlab('Delay (in months)') + ylab('Subjective Value') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
set_text <- element_text(size = 24)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 3, colour = 'red') + stat_function(fun = hyperfun, size = 1) +
xlab('Delay (in months)') + ylab('Subjective Value') +
scale_x_continuous(breaks = c(1,6,12,36,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
dt <- read.csv('~/Desktop/imageList.csv', header = FALSE)
d1 <- matrix(, nrow = 0, ncol = 5)
for (x in 1:nrow(dt) ) {
print(x)
a <- t(matrix(unlist(strsplit(trimws(as.character(dt[x,1]), which ='both'), ''))))
d1 <- rbind(d1,a)
}
View(d1)
d1 <- as.data.frame(d1)
View(d1)
View(d1)
colnames(d1) <- c('Trustee', 'Morphee', 'Random1', 'Random2', 'Level')
View(d1)
#How many trustees?
unique(d1$Trustee)
#How many trustees?
length(unique(d1$Trustee))
# How many morphees
length(unique(d1$Morphee))
unique(d1$Morphee)
# How many levels of morphing?
length(unique(d1$Level))
#Which levels of morph?
unique(d1$level)
#Which levels of morph?
unique(d1$Level)
View(dt)
View(dt)
# How many of each combo?
unique(dt$V1)
# How many of each combo?
length(unique(dt$V1))
# How many per trustee?
d1[which(d1$Trustee == 'A'),]
# How many per trustee?
length(unique(d1[which(d1$Trustee == 'A'),]$Level))
# How many per trustee?
length(unique(d1[which(d1$Trustee == 'A'),]$Morphee))
# How many per trustee?
length(unique(d1[which(d1$Trustee == 'A'),])
# How many per trustee?
length(unique(d1[which(d1$Trustee == 'A'),])
)
# How many per trustee?
d1[which(d1$Trustee == 'A'),]
source('~/Dropbox (Personal)/Functions/SummarySE.R')
summarySE(d1, Random2, groupvars = (Morphee, Level))
source('~/Dropbox (Personal)/Functions/SummarySE.R')
summarySE(d1, Random2, groupvars = (Morphee, Level))
summarySE(d1, Random2, groupvars = c(Morphee, Level))
summarySE(d1, Random2, groupvars = c('Morphee', 'Level'))
summarySE(d1, 'Random2', groupvars = c('Morphee', 'Level'))
summarySE(d1[which(d1$Trustee == 'A'),], 'Random2', groupvars = c('Morphee', 'Level'))
# How many morphees?
length(unique(d1$Morphee))
# How many levels of morphing?
length(unique(d1$Level))
# How many of each combo?
length(unique(dt$V1))
colnames(d1) <- c('Trustee', 'Morphee', 'Random1', 'Random2', 'Level')
summarySE(d1[which(d1$Trustee == 'A'),], 'Random2', groupvars = c('Morphee', 'Level'))
install.packages('IRkernel')
IRkernel::installspec()
clear
update.packages()
clear
shiny::runApp('R_Projects/agebp/shiny')
runApp('R_Projects/agebp/shiny')
runApp('R_Projects/agebp/shiny')
runApp('R_Projects/agebp/shiny')
runApp('R_Projects/agebp/shiny')
runApp('R_Projects/agebp/shiny')
runApp('R_Projects/agebp/shiny')
runApp('R_Projects/agebp/shiny')
runApp('R_Projects/agebp/shiny')
runApp('R_Projects/agebp/shiny')
# import libraries and set working directory
rm(list=ls())
setwd('~/R_Projects/boundSkew1/data')
library(ggplot2)
# load functions
source('~/Dropbox (Personal)/Functions/SummarySE.R')
# load data
dt <- read.csv('boundSkew1Long.csv')
# load data
dt <- read.csv('boundSkew1Long.csv')
d0 <- na.omit(dt)
d0 <- na.omit(dt)
# load data
dt <- read.csv('boundSkew1Long.csv')
d0 <- na.omit(dt)
d0$deg_skew <- factor(d0$deg_skew, levels = c('Symmetric', 'Weak', 'Moderate', 'Strong'))
d0$magnitude <- factor(d0$magnitude)
# age effects on acceptance rates
ggplot(d0, aes(Age, accept, colour = deg_skew, fill = deg_skew)) + geom_smooth(method=lm) +
theme(legend.position = 'top') + facet_grid(magnitude ~ valence)
# create summary - main effect of degree of skewness
d1 <- summarySE(data=d0, measurevar = 'accept', groupvars='deg_skew')
ggplot(d1, aes(deg_skew, accept, fill = deg_skew)) + geom_bar(position=position_dodge(), stat='identity') +
geom_errorbar(aes(ymin=accept - se, ymax = accept + se), width = .2, position=position_dodge(.9)) +
theme(legend.position = 'none')
# create summary - add interaction with valence of gamble
d2 <- summarySE(data=d0, measurevar = 'accept', groupvars=c('valence','deg_skew'))
ggplot(d2, aes(valence, accept, fill = deg_skew)) + geom_bar(position=position_dodge(), stat='identity') +
geom_errorbar(aes(ymin=accept - se, ymax = accept + se), width = .2, position=position_dodge(.9)) +
theme(legend.position = 'top')
# create summary - add interaction with magnitude of gamble
d3 <- summarySE(data=d0, measurevar = 'accept', groupvars=c('magnitude','deg_skew'))
ggplot(d3, aes(magnitude, accept, fill = deg_skew)) + geom_bar(position=position_dodge(), stat='identity') +
geom_errorbar(aes(ymin=accept - se, ymax = accept + se), width = .2, position=position_dodge(.9)) +
theme(legend.position = 'top')
# create summary - 3 way interaction
d4 <- summarySE(data=d0, measurevar = 'accept', groupvars=c('valence', 'magnitude', 'deg_skew'))
ggplot(d4, aes(valence, accept, fill = deg_skew)) + geom_bar(position=position_dodge(), stat='identity') +
geom_errorbar(aes(ymin=accept - se, ymax = accept + se), width = .2, position=position_dodge(.9)) +
theme(legend.position = 'top') + facet_wrap(~ magnitude)
shiny::runApp('~/R_Projects/agebp/shiny')
runApp('~/R_Projects/agebp/shiny')
runApp('~/R_Projects/agebp/shiny')
runApp('~/R_Projects/agebp/shiny')
runApp('~/R_Projects/agebp/shiny')
