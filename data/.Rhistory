fit1 <- lm(value ~ delay)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun)
hyperfun <- function(x) { 1 / (1 + x*.015)}
fit1 <- lm(value ~ delay)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun)
hyperfun <- function(x) { 1 / (1 + x*.02)}
fit1 <- lm(value ~ delay)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun)
hyperfun <- function(x) { 1 / (1 + x*.05)}
fit1 <- lm(value ~ delay)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun)
hyperfun <- function(x) { 1 / (1 + x*.06)}
fit1 <- lm(value ~ delay)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n Proportion of Objective Value')
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120))
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120))
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0))
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
hyperfun <- function(x) { 1 / (1 + x*.055)}
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
hyperfun <- function(x) { 1 / (1 + x*.053)}
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
hyperfun <- function(x) { 1 / (1 + x*.05)}
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
ggplot(dt, aes(delay, value), color = delay) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
ggplot(dt, aes(delay, value), color = delay) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', aes(color = delay)) + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
View(dt)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity')) + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
hyperfun <- function(x) { 1 / (1 + x*.05)}
ggplot(dt, aes(delay, value)) + geom_point(stat='identity')) + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
hyperfun <- function(x) { 1 / (1 + x*.05)}
ggplot(dt, aes(delay, value)) + geom_point(stat='identity')) + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120), size = 16) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw()
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = element_text(size = 16))
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = element_text(size = 16), axis.title.y = element_text(size = 16))
set_text <- element_text(size = 16)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity') + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 16) + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 10) + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 5) + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 4) + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 3) + stat_function(fun = hyperfun) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 3) + stat_function(fun = hyperfun, size = 2) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 3) + stat_function(fun = hyperfun, size = 1) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 3, fill = red) + stat_function(fun = hyperfun, size = 1) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 3, fill = 'red') + stat_function(fun = hyperfun, size = 1) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 3, colour = 'red') + stat_function(fun = hyperfun, size = 1) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
set_text <- element_text(size = 24)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 3, colour = 'red') + stat_function(fun = hyperfun, size = 1) +
xlab('Delay (in months)') + ylab('Subjective Value\n (Proportion of Objective Value)') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 3, colour = 'red') + stat_function(fun = hyperfun, size = 1) +
xlab('Delay (in months)') + ylab('Subjective Value') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
set_text <- element_text(size = 20)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 3, colour = 'red') + stat_function(fun = hyperfun, size = 1) +
xlab('Delay (in months)') + ylab('Subjective Value') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
set_text <- element_text(size = 24)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 3, colour = 'red') + stat_function(fun = hyperfun, size = 1) +
xlab('Delay (in months)') + ylab('Subjective Value') +
scale_x_continuous(breaks = c(1,6,12,26,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
set_text <- element_text(size = 24)
ggplot(dt, aes(delay, value)) + geom_point(stat='identity', size = 3, colour = 'red') + stat_function(fun = hyperfun, size = 1) +
xlab('Delay (in months)') + ylab('Subjective Value') +
scale_x_continuous(breaks = c(1,6,12,36,60,120)) + scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1.0)) +
theme_bw() + theme(axis.title.x = set_text, axis.text.x = set_text, axis.title.y = set_text, axis.text.y = set_text)
dt <- read.csv('~/Desktop/imageList.csv', header = FALSE)
d1 <- matrix(, nrow = 0, ncol = 5)
for (x in 1:nrow(dt) ) {
print(x)
a <- t(matrix(unlist(strsplit(trimws(as.character(dt[x,1]), which ='both'), ''))))
d1 <- rbind(d1,a)
}
View(d1)
d1 <- as.data.frame(d1)
View(d1)
View(d1)
colnames(d1) <- c('Trustee', 'Morphee', 'Random1', 'Random2', 'Level')
View(d1)
#How many trustees?
unique(d1$Trustee)
#How many trustees?
length(unique(d1$Trustee))
# How many morphees
length(unique(d1$Morphee))
unique(d1$Morphee)
# How many levels of morphing?
length(unique(d1$Level))
#Which levels of morph?
unique(d1$level)
#Which levels of morph?
unique(d1$Level)
View(dt)
View(dt)
# How many of each combo?
unique(dt$V1)
# How many of each combo?
length(unique(dt$V1))
# How many per trustee?
d1[which(d1$Trustee == 'A'),]
# How many per trustee?
length(unique(d1[which(d1$Trustee == 'A'),]$Level))
# How many per trustee?
length(unique(d1[which(d1$Trustee == 'A'),]$Morphee))
# How many per trustee?
length(unique(d1[which(d1$Trustee == 'A'),])
# How many per trustee?
length(unique(d1[which(d1$Trustee == 'A'),])
)
# How many per trustee?
d1[which(d1$Trustee == 'A'),]
source('~/Dropbox (Personal)/Functions/SummarySE.R')
summarySE(d1, Random2, groupvars = (Morphee, Level))
source('~/Dropbox (Personal)/Functions/SummarySE.R')
summarySE(d1, Random2, groupvars = (Morphee, Level))
summarySE(d1, Random2, groupvars = c(Morphee, Level))
summarySE(d1, Random2, groupvars = c('Morphee', 'Level'))
summarySE(d1, 'Random2', groupvars = c('Morphee', 'Level'))
summarySE(d1[which(d1$Trustee == 'A'),], 'Random2', groupvars = c('Morphee', 'Level'))
# How many morphees?
length(unique(d1$Morphee))
# How many levels of morphing?
length(unique(d1$Level))
# How many of each combo?
length(unique(dt$V1))
colnames(d1) <- c('Trustee', 'Morphee', 'Random1', 'Random2', 'Level')
summarySE(d1[which(d1$Trustee == 'A'),], 'Random2', groupvars = c('Morphee', 'Level'))
install.packages('IRkernel')
IRkernel::installspec()
clear
update.packages()
clear
shiny::runApp('R_Projects/agebp/shiny')
runApp('R_Projects/agebp/shiny')
runApp('R_Projects/agebp/shiny')
runApp('R_Projects/agebp/shiny')
runApp('R_Projects/agebp/shiny')
runApp('R_Projects/agebp/shiny')
runApp('R_Projects/agebp/shiny')
runApp('R_Projects/agebp/shiny')
runApp('R_Projects/agebp/shiny')
runApp('R_Projects/agebp/shiny')
# import libraries and set working directory
rm(list=ls())
setwd('~/R_Projects/boundSkew1/data')
library(reshape2)
# import data
d0 <- read.csv('Skew_boundary_raw_numeric.csv', na.strings = c('', 'NA'))
# remove first two rows (not data)
d0 <- d0[3:nrow(d0),]
# limit skew trials for now
d1 <- d0[c(grep('ResponseId', colnames(d0)), grep('Age', colnames(d0)), grep('CT2', colnames(d0)):grep('CT1', colnames(d0)), grep('0_95_5', colnames(d0)):grep('n5_55_45', colnames(d0)), grep('Q134', colnames(d0)))]
# remove incomplete records
d1 <- d1[complete.cases(d1),]
# screen data based on response to catch trials - remove participants who do not answer consistently
d3 <- d1[which(d1$CT1 == 1),]
d4 <- d3[which(d3$CT2 == 2),]
rm(d0,d1,d3)
# remove catch trials
d4$CT2 <- NULL
d4$CT1 <- NULL
# recode age into actual age
d4$Age <- as.integer(as.character(d4$Age)) + 19
# make data long
d2 <- melt(d4, id.vars = c('ResponseId', 'Age'), variable.name = 'gamble')
rm(d4)
# recode value into acceptance - 0 (for reject) and 1 (for accept)
d2$accept <- as.numeric(d2$value) - 1
# add condition names
# valence (gain/loss/neutral)
d2$v1 <- as.factor(t(as.data.frame(strsplit(as.character(d2$gamble), '_')))[,1])
d2$valence[d2$v1 == 'X0'] <- 'neutral'
d2$valence[d2$v1 == 'X0.5'] <- 'gain'
d2$valence[d2$v1 == 'X5'] <- 'gain'
d2$valence[d2$v1 == 'n0.5'] <- 'loss'
d2$valence[d2$v1 == 'n5'] <- 'loss'
# magnitude (0, 0.5, 5)
d2$magnitude[d2$v1 == 'X0'] <- 0
d2$magnitude[d2$v1 == 'X0.5'] <- 0.5
d2$magnitude[d2$v1 == 'X5'] <- 5
d2$magnitude[d2$v1 == 'n0.5'] <- 0.5
d2$magnitude[d2$v1 == 'n5'] <- 5
d2$v1 <- NULL
# deg of skew (low, medium, high)
d2$v2 <- as.factor(t(as.data.frame(strsplit(as.character(d2$gamble), '_')))[,2])
View(d2)
View(d2)
# import libraries and set working directory
rm(list=ls())
setwd('~/R_Projects/boundSkew1/data')
library(reshape2)
# import data
d0 <- read.csv('Skew_boundary_raw_numeric.csv', na.strings = c('', 'NA'))
# remove first two rows (not data)
d0 <- d0[3:nrow(d0),]
# limit skew trials for now
d1 <- d0[c(grep('ResponseId', colnames(d0)), grep('Age', colnames(d0)), grep('CT2', colnames(d0)):grep('CT1', colnames(d0)), grep('0_95_5', colnames(d0)):grep('n5_55_45', colnames(d0)), grep('Q134', colnames(d0)))]
# remove incomplete records
d1 <- d1[complete.cases(d1),]
# screen data based on response to catch trials - remove participants who do not answer consistently
d3 <- d1[which(d1$CT1 == 1),]
d4 <- d3[which(d3$CT2 == 2),]
rm(d0,d1,d3)
# remove catch trials
d4$CT2 <- NULL
d4$CT1 <- NULL
# recode age into actual age
d4$Age <- as.integer(as.character(d4$Age)) + 19
# make data long
d2 <- melt(d4, id.vars = c('ResponseId', 'Age'), variable.name = 'gamble')
rm(d4)
# recode value into acceptance - 0 (for reject) and 1 (for accept)
d2$accept <- as.numeric(d2$value) - 1
# add condition names
# valence (gain/loss/neutral)
d2$v1 <- as.factor(t(as.data.frame(strsplit(as.character(d2$gamble), '_')))[,1])
d2$valence[d2$v1 == 'X0'] <- 'neutral'
d2$valence[d2$v1 == 'X0.5'] <- 'gain'
d2$valence[d2$v1 == 'X5'] <- 'gain'
d2$valence[d2$v1 == 'n0.5'] <- 'loss'
d2$valence[d2$v1 == 'n5'] <- 'loss'
# magnitude (0, 0.5, 5)
d2$magnitude[d2$v1 == 'X0'] <- 0
d2$magnitude[d2$v1 == 'X0.5'] <- 0.5
d2$magnitude[d2$v1 == 'X5'] <- 5
d2$magnitude[d2$v1 == 'n0.5'] <- 0.5
d2$magnitude[d2$v1 == 'n5'] <- 5
d2$v1 <- NULL
# deg of skew (low, medium, high)
d2$v2 <- as.factor(t(as.data.frame(strsplit(as.character(d2$gamble), '_')))[,2])
d2$deg_skew[d2$v2 == 95 | d2$v2 == 5] <- 'Strong'
d2$deg_skew[d2$v2 == 90 | d2$v2 == 10] <- 'Strong'
d2$deg_skew[d2$v2 == 85 | d2$v2 == 15] <- 'Strong'
d2$deg_skew[d2$v2 == 80 | d2$v2 == 20] <- 'Moderate'
d2$deg_skew[d2$v2 == 75 | d2$v2 == 25] <- 'Moderate'
d2$deg_skew[d2$v2 == 70 | d2$v2 == 30] <- 'Moderate'
d2$deg_skew[d2$v2 == 65 | d2$v2 == 35] <- 'Weak'
d2$deg_skew[d2$v2 == 60 | d2$v2 == 40] <- 'Weak'
d2$deg_skew[d2$v2 == 55 | d2$v2 == 45] <- 'Weak'
d2$deg_skew[d2$v2 == 50 | d2$v2 == 50] <- 'Symmetric'
# dir of skew (positive or negative)
d2$dir_skew[d2$v2 < 50] <- 'Negative'
# dir of skew (positive or negative)
d2$dir_skew[which(d2$v2 < 50),] <- 'Negative'
View(d2)
# dir of skew (positive or negative)
d2$v2 <- as.numeric(as.character(d2$v2))
d2$dir_skew[d2$v2 < 50] <- 'Negative'
d2$dir_skew[d2$v2 > 50] <- 'Postiive'
d2$dir_skew[d2$v2 == 50] <- 'Symmetric'
d2$v2 <- NULL
View(d2)
d2$dir_skew[d2$v2 > 50] <- 'Negative'
d2$dir_skew[d2$v2 < 50] <- 'Postiive'
d2$dir_skew[d2$v2 == 50] <- 'Symmetric'
d2$v2 <- NULL
# clean boundary skew 1 data set
# KLS 1.11.19
# import libraries and set working directory
rm(list=ls())
setwd('~/R_Projects/boundSkew1/data')
library(reshape2)
# import data
d0 <- read.csv('Skew_boundary_raw_numeric.csv', na.strings = c('', 'NA'))
# remove first two rows (not data)
d0 <- d0[3:nrow(d0),]
# limit skew trials for now
d1 <- d0[c(grep('ResponseId', colnames(d0)), grep('Age', colnames(d0)), grep('CT2', colnames(d0)):grep('CT1', colnames(d0)), grep('0_95_5', colnames(d0)):grep('n5_55_45', colnames(d0)), grep('Q134', colnames(d0)))]
# remove incomplete records
d1 <- d1[complete.cases(d1),]
# screen data based on response to catch trials - remove participants who do not answer consistently
d3 <- d1[which(d1$CT1 == 1),]
d4 <- d3[which(d3$CT2 == 2),]
rm(d0,d1,d3)
# remove catch trials
d4$CT2 <- NULL
d4$CT1 <- NULL
# recode age into actual age
d4$Age <- as.integer(as.character(d4$Age)) + 19
# make data long
d2 <- melt(d4, id.vars = c('ResponseId', 'Age'), variable.name = 'gamble')
rm(d4)
# recode value into acceptance - 0 (for reject) and 1 (for accept)
d2$accept <- as.numeric(d2$value) - 1
# add condition names
# valence (gain/loss/neutral)
d2$v1 <- as.factor(t(as.data.frame(strsplit(as.character(d2$gamble), '_')))[,1])
d2$valence[d2$v1 == 'X0'] <- 'neutral'
d2$valence[d2$v1 == 'X0.5'] <- 'gain'
d2$valence[d2$v1 == 'X5'] <- 'gain'
d2$valence[d2$v1 == 'n0.5'] <- 'loss'
d2$valence[d2$v1 == 'n5'] <- 'loss'
# magnitude (0, 0.5, 5)
d2$magnitude[d2$v1 == 'X0'] <- 0
d2$magnitude[d2$v1 == 'X0.5'] <- 0.5
d2$magnitude[d2$v1 == 'X5'] <- 5
d2$magnitude[d2$v1 == 'n0.5'] <- 0.5
d2$magnitude[d2$v1 == 'n5'] <- 5
d2$v1 <- NULL
# deg of skew (low, medium, high)
d2$v2 <- as.factor(t(as.data.frame(strsplit(as.character(d2$gamble), '_')))[,2])
d2$deg_skew[d2$v2 == 95 | d2$v2 == 5] <- 'Strong'
d2$deg_skew[d2$v2 == 90 | d2$v2 == 10] <- 'Strong'
d2$deg_skew[d2$v2 == 85 | d2$v2 == 15] <- 'Strong'
d2$deg_skew[d2$v2 == 80 | d2$v2 == 20] <- 'Moderate'
d2$deg_skew[d2$v2 == 75 | d2$v2 == 25] <- 'Moderate'
d2$deg_skew[d2$v2 == 70 | d2$v2 == 30] <- 'Moderate'
d2$deg_skew[d2$v2 == 65 | d2$v2 == 35] <- 'Weak'
d2$deg_skew[d2$v2 == 60 | d2$v2 == 40] <- 'Weak'
d2$deg_skew[d2$v2 == 55 | d2$v2 == 45] <- 'Weak'
d2$deg_skew[d2$v2 == 50 | d2$v2 == 50] <- 'Symmetric'
# dir of skew (positive or negative)
d2$v2 <- as.numeric(as.character(d2$v2))
d2$dir_skew[d2$v2 > 50] <- 'Negative'
d2$dir_skew[d2$v2 < 50] <- 'Postiive'
d2$dir_skew[d2$v2 == 50] <- 'Symmetric'
d2$v2 <- NULL
View(d2)
#save data frame
write.csv(d2, 'boundSkew1Long.csv', row.names = FALSE)
# import libraries and set working directory
rm(list=ls())
setwd('~/R_Projects/boundSkew1/data')
library(ggplot2)
# load functions
source('~/Dropbox (Personal)/Functions/SummarySE.R')
# load data
dt <- read.csv('boundSkew1Long.csv')
d0 <- na.omit(dt)
d0$deg_skew <- factor(d0$deg_skew, levels = c('Symmetric', 'Weak', 'Moderate', 'Strong'))
d0$magnitude <- factor(d0$magnitude)
# age effects on acceptance rates
ggplot(d0, aes(Age, accept, colour = deg_skew, fill = deg_skew)) + geom_smooth(method=lm) +
theme(legend.position = 'top') + facet_grid(magnitude ~ valence)
# import libraries and set working directory
rm(list=ls())
setwd('~/R_Projects/boundSkew1/data')
library(ggplot2)
# load functions
source('~/Dropbox (Personal)/Functions/SummarySE.R')
# load data
d0 <- read.csv('boundSkew1Long.csv')
#d0 <- na.omit(dt)
d0$deg_skew <- factor(d0$deg_skew, levels = c('Symmetric', 'Weak', 'Moderate', 'Strong'))
# age effects on acceptance rates
ggplot(d0, aes(Age, accept, colour = deg_skew, fill = deg_skew)) + geom_smooth(method=lm) +
theme(legend.position = 'top') + facet_grid(magnitude ~ valence)
# import libraries and set working directory
rm(list=ls())
setwd('~/R_Projects/boundSkew1/data')
library(ggplot2)
# load functions
source('~/Dropbox (Personal)/Functions/SummarySE.R')
# load data
dt <- read.csv('boundSkew1Long.csv')
d0 <- na.omit(dt)
# reorder deg_skew factor
d0$deg_skew <- factor(d0$deg_skew, levels = c('Symmetric', 'Weak', 'Moderate', 'Strong'))
# make magnitude a factor
d0$magnitude <- factor(d0$magnitude)
# age effects on acceptance rates
ggplot(d0, aes(Age, accept, colour = deg_skew, fill = deg_skew)) + geom_smooth(method=lm) +
theme(legend.position = 'top') + facet_grid(magnitude ~ valence)
# only look at postive skew
d0 <- d0[which(d0$dir_skew == 'Positive'),]
# age effects on acceptance rates
ggplot(d0, aes(Age, accept, colour = deg_skew, fill = deg_skew)) + geom_smooth(method=lm) +
theme(legend.position = 'top') + facet_grid(magnitude ~ valence)
# import libraries and set working directory
rm(list=ls())
setwd('~/R_Projects/boundSkew1/data')
library(ggplot2)
# load functions
source('~/Dropbox (Personal)/Functions/SummarySE.R')
# load data
dt <- read.csv('boundSkew1Long.csv')
d0 <- na.omit(dt)
# reorder deg_skew factor
d0$deg_skew <- factor(d0$deg_skew, levels = c('Symmetric', 'Weak', 'Moderate', 'Strong'))
# make magnitude a factor
d0$magnitude <- factor(d0$magnitude)
View(d0)
source('~/R_Projects/boundSkew1/scr/boundSkew1Clean.R', echo=TRUE)
View(d2)
# import libraries and set working directory
rm(list=ls())
setwd('~/R_Projects/boundSkew1/data')
library(ggplot2)
# load functions
source('~/Dropbox (Personal)/Functions/SummarySE.R')
# load data
dt <- read.csv('boundSkew1Long.csv')
d0 <- na.omit(dt)
# reorder deg_skew factor
d0$deg_skew <- factor(d0$deg_skew, levels = c('Symmetric', 'Weak', 'Moderate', 'Strong'))
# make magnitude a factor
d0$magnitude <- factor(d0$magnitude)
# only look at postive skew
d0 <- d0[which(d0$dir_skew == 'Positive'),]
# age effects on acceptance rates
ggplot(d0, aes(Age, accept, colour = deg_skew, fill = deg_skew)) + geom_smooth(method=lm) +
theme(legend.position = 'top') + facet_grid(magnitude ~ valence)
# create summary - main effect of degree of skewness
d1 <- summarySE(data=d0, measurevar = 'accept', groupvars='deg_skew')
ggplot(d1, aes(deg_skew, accept, fill = deg_skew)) + geom_bar(position=position_dodge(), stat='identity') +
geom_errorbar(aes(ymin=accept - se, ymax = accept + se), width = .2, position=position_dodge(.9)) +
theme(legend.position = 'none')
# create summary - add interaction with valence of gamble
d2 <- summarySE(data=d0, measurevar = 'accept', groupvars=c('valence','deg_skew'))
ggplot(d2, aes(valence, accept, fill = deg_skew)) + geom_bar(position=position_dodge(), stat='identity') +
geom_errorbar(aes(ymin=accept - se, ymax = accept + se), width = .2, position=position_dodge(.9)) +
theme(legend.position = 'top')
# create summary - add interaction with magnitude of gamble
d3 <- summarySE(data=d0, measurevar = 'accept', groupvars=c('magnitude','deg_skew'))
ggplot(d3, aes(magnitude, accept, fill = deg_skew)) + geom_bar(position=position_dodge(), stat='identity') +
geom_errorbar(aes(ymin=accept - se, ymax = accept + se), width = .2, position=position_dodge(.9)) +
theme(legend.position = 'top')
# create summary - 3 way interaction
d4 <- summarySE(data=d0, measurevar = 'accept', groupvars=c('valence', 'magnitude', 'deg_skew'))
ggplot(d4, aes(valence, accept, fill = deg_skew)) + geom_bar(position=position_dodge(), stat='identity') +
geom_errorbar(aes(ymin=accept - se, ymax = accept + se), width = .2, position=position_dodge(.9)) +
theme(legend.position = 'top') + facet_wrap(~ magnitude)
