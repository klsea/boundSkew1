colnames(line) <- colnames(table)
table <- rbind(table,line)
target <- table$Variable; target <- target[c(1,9,2:3,5:8,4)]
table <- table[match(target, table$Variable),];
table$Variable <- c('Age', 'Gender', 'Digit Span', 'Letter-Number Sequencing', 'Numeracy', 'Paired Associates Delayed Recall',
'Shipley Vocabulary Subscale', 'Trails Test', 'Mini-Mental Status Exam')
## Create table for paper
table <- merge(r, t)
View(table)
line <- data.frame('Gender', '', gender)
colnames(line) <- colnames(table)
table <- rbind(table,line)
target <- table$Variable; target <- target[c(1,9,2:3,5:8,4)]
table <- table[match(target, table$Variable),];
View(table)
## Create table for paper
table <- merge(r, t)
line <- data.frame('Gender', '', gender)
colnames(line) <- colnames(table)
table <- rbind(table,line)
View(table)
target <- table$Variable;
target
target <- target[c(1,7,2:6)]
table <- table[match(target, table$Variable),];
View(table)
table$Variable <- c('Age', 'Gender', 'Digit Span', 'Letter-Number Sequencing', 'Numeracy', 'Paired Associates Delayed Recall',
'Shipley Vocabulary Subscale')
View(table)
write.csv(table, '~/Dropbox (MCAB Lab)/MCAB/Drafts/agebp/ToShare/SVTable1.csv', row.names = FALSE)
rm(r,t,line,target)
# Read in and clean data
# pet data
pet <- read.csv('~/Dropbox (MCAB Lab)/MCAB/Drafts/agebp/data/SV_DND_wide.csv')[1:3]
pet$study <- substr(pet$Subject, 1,3)
pet$study <- gsub('SV_', 'SV', pet$study)
pet <- pet[which(pet$study == 'SV'),]
pet$study <- NULL
pet$Subject <- as.character(pet$Subject)
pet$Subject <- as.numeric(gsub('SV_', '', pet$Subject))
# neuropsych data
neuro <- read.csv('~/Dropbox (MCAB Lab)/MCAB/Drafts/agebp/data/DopamineSubjectiveValue_Measures.csv')
names(neuro)[names(neuro)=='Total.'] <- 'DigitSpanTotal'
names(neuro)[names(neuro)=='Total.Score.'] <- 'LetterNumSeq'
names(neuro)[names(neuro)=='Total.correct..sum.'] <- 'Numeracy'
names(neuro)[names(neuro) == 'X25.30.Minute.Recall'] <- 'paDelayedRecall'
names(neuro)[names(neuro)=='Raw.score'] <- 'ShipleyRaw'
names <- c('Subject.ID', 'DigitSpanTotal', 'LetterNumSeq', 'Numeracy', 'paDelayedRecall', 'ShipleyRaw')
neuropsych <- neuro[names];
neuropsych <- neuropsych[which(neuropsych$Subject.ID !='125'),]
# create and save filtered data
data <- merge(pet, neuropsych, by.x = 'Subject', by.y = 'Subject.ID', all.x = TRUE)
rm(neuro, neuropsych, pet)
data <- data[c(1,3,2,4:8)]
write.csv(data, '~/Dropbox (MCAB Lab)/MCAB/Drafts/agebp/ToShare/svpetNeuro.csv', row.names = FALSE)
# Correlation with age
source('~/Dropbox (Personal)/Functions/corrTableCI.R')
r <- corrTableCI(data[3:length(data)])[,1:2]
colnames(r) <- c('Variable', 'R [95% CI] with age')
# Means and std. dev
library(matrixStats)
n <- colnames(data[3:length(data)])
m <- colMeans(data[3:length(data)], na.rm = TRUE)
s <- colSds(as.matrix(data[3:length(data)]), na.rm=TRUE)
t <- matrix(nrow=0, ncol=2)
u <- matrix(nrow=0, ncol=2)
for (i in 1:length(m)) {
name <- n[i]
value <- paste0(round(m[[i]],2), ' (', round(s[i],2), ')')
row <- c(name, value)
t <- rbind(t, row)
n_missing <- sum(is.na(data[i+2]))
row2 <- c(name, n_missing)
u <- rbind(u, row2)
}
rm(n,m,s,i, name, value, row)
t <- as.data.frame(t)
u <- as.data.frame(u)
colnames(t) <- c('Variable', 'M (SD)')
colnames(u) <- c('Variable', 'N Missing')
View(data)
data$Sex
# Gender
m <- table(data$Sex)[[2]]
f <- table(data$Sex)[[1]]
t.test(data$Age~data$Sex)
gender = paste0(as.character(f), "F/", as.character(m), "M")
data.frame('Variable' = 'Gender', 'R [95% CI] with age' = '', 'M (SD)' = gender)
## Create table for paper
table <- merge(r, t)
line <- data.frame('Gender', '', gender)
colnames(line) <- colnames(table)
table <- rbind(table,line)
target <- table$Variable;
target <- target[c(1,7,2:6)]
table <- table[match(target, table$Variable),];
source('~/Dropbox (MCAB Lab)/MCAB/Drafts/agebp/ToShare/neuropsych.R', echo=TRUE)
# Means and std. dev
library(matrixStats)
n <- colnames(data[3:length(data)])
m <- colMeans(data[3:length(data)], na.rm = TRUE)
s <- colSds(as.matrix(data[3:length(data)]), na.rm=TRUE)
t <- matrix(nrow=0, ncol=2)
u <- matrix(nrow=0, ncol=2)
for (i in 1:length(m)) {
name <- n[i]
value <- paste0(round(m[[i]],2), ' (', round(s[i],2), ')')
row <- c(name, value)
t <- rbind(t, row)
n_missing <- sum(is.na(data[i+2]))
row2 <- c(name, n_missing)
u <- rbind(u, row2)
}
rm(n,m,s,i, name, value, row)
t <- as.data.frame(t)
u <- as.data.frame(u)
colnames(t) <- c('Variable', 'M (SD)')
colnames(u) <- c('Variable', 'N Missing')
View(u)
# Set working directory, load packages, functions, and data
rm(list=ls())
setwd('~R_Projects/tdmeta/')
library(metafor)
install.packages('metafor')
library(metafor)
library(metafor); library(gdata)
setwd('~R_Projects/tdmeta/')
# Set working directory, load packages, and data
rm(list=ls())
setwd('~R_Projects/tdmeta/')
# Open packages, set working directory and functions
library(lme4); library(ggplot2); library(plyr);library(brms); library(rstan)
source("~/Dropbox (Personal)/Functions/SummarySE.R")
# Load dt
dt <- read.csv('~/R_Projects/dndtwostep/data/41subsDND.csv')
# How many subjects?
n <- length(unique(dt$Subject))
dir = paste0('~/R_Projects/dndtwostep/analysis/N', n, '/CR_ch2RT_contAge/')
# Eliminate trials without choice
dt <- subset(dt, ch1>0 & ch2>0)
len <- nrow(dt)
# Recode variables of interest (modified from Nathaniel's email)
dt$st <- (dt$stim3 - 3)/2+2
dt$mn <- 2*dt$payoff-1
dt$rare <- 2*as(dt$ch1 != (dt$st-1), "numeric") - 1
# Dependent Variable: Stay/Switch
dt$stay <- c(dt$ch1[2:len] == dt$ch1[1:len-1],NaN) #Nathaniel's code
dt[diff(dt$trial)<1,]$stay = NaN #Nathaniel's code
#========
# Setup multiple cores for rstan
#========
rstan_options (auto_write=TRUE)
options (mc.cores=parallel::detectCores ()) # Run on multiple cores
# Model 2 - only interactions of interest with age group, controlling for drug
fit2 = brm(formula = ch2RT ~ rare + mn + Age:rare + Age + drug + (1 + rare * mn | Subject), data=dt, family="gaussian",
prior = set_prior("normal (0,10)"))
summary(fit2, correlation=FALSE)
m2 <- fixef(fit2)
saveRDS(fit2, paste0(dir, 'models/m2.rds'))
saveRDS(m2, paste0(dir, 'fixedeff/m2.rds'))
# Model 3 - controlling for drug and age group
fit3 = brm(formula = ch2RT ~ rare + mn + Age + drug + (1 + rare * mn | Subject), data=dt, family="gaussian",
prior = set_prior("normal (0,10)"))
summary(fit3, correlation=FALSE)
m3 <- fixef(fit3)
saveRDS(fit3, paste0(dir, 'models/m3.rds'))
saveRDS(m3, paste0(dir, 'fixedeff/m3.rds'))
# Model 1 - Age Effects full factorial model, controlling for drug
fit1 = brm(formula = ch2RT ~ rare * mn * Age * drug + (1 + rare * mn | Subject), data=dt, family="gaussian",
prior = set_prior("normal (0,10)"))
summary(fit1, correlation=FALSE)
m1 <- fixef(fit1)
saveRDS(fit1, paste0(dir, 'models/m1.rds'))
saveRDS(m1, paste0(dir, 'fixedeff/m1.rds'))
# Open packages, set working directory and functions
library(lme4); library(ggplot2); library(plyr); library(brms); library(rstan)
source("~/Dropbox (Personal)/Functions/SummarySE.R")
# Load dt
dt <- read.csv('~/R_Projects/dndtwostep/data/41subsDND.csv')
# How many subjects?
n <- length(unique(dt$Subject))
dir = paste0('~/R_Projects/dndtwostep/analysis/N', n, '/CR_Stay_contAge/')
# Eliminate trials without choice
dt <- subset(dt, ch1>0 & ch2>0)
len <- nrow(dt)
# Recode variables of interest (modified from Nathaniel's email)
dt$st <- (dt$stim3 - 3)/2+2
dt$mn <- 2*dt$payoff-1
dt$prevRew <- c(NaN, dt$mn[1:len-1])
dt$rare <- 2*as(dt$ch1 != (dt$st-1), "numeric") - 1
# Dependent Variable: Stay/Switch
dt$stay <- c(dt$ch1[2:len] == dt$ch1[1:len-1],NaN) #Nathaniel's code
dt[diff(dt$trial)<1,]$stay = NaN #Nathaniel's code
#========
# Setup multiple cores for rstan
#========
rstan_options (auto_write=TRUE)
options (mc.cores=parallel::detectCores ()) # Run on multiple cores
# Model 1 - Age Effects full factorial model, controlling for drug
fit1 = brm(formula = stay ~ rare * mn * Age * drug + (rare * mn * drug| Subject), data=dt, family=bernoulli(link = "logit"),
prior = set_prior("normal (0,10)"))
summary(fit1, correlation=FALSE)
m1 <- fixef(fit1)
saveRDS(fit1, paste0(dir, 'models/m1.rds'))
saveRDS(m1, paste0(dir, 'fixedeff/m1.rds'))
imagelist <- read.csv('~/Dropbox (MCAB Lab)/MCAB/Tasks/Trust Game (IN PROGRESS)/newfaces/imageList.csv')
View(imagelist)
View(imagelist)
imagelist <- read.csv('~/Dropbox (MCAB Lab)/MCAB/Tasks/Trust Game (IN PROGRESS)/newfaces/imageList.csv', header = FALSE)
View(imagelist)
colnames(imagelist) <- filename
View(imagelist)
colnames(imagelist) <- 'filename'
View(imagelist)
imagelist$filename <- as.character(imagelist$filename)
apply(imagelist, 1, strsplit(), split = 'f')
strsplit(imagelist$filename, 'f')[,1]
strsplit(imagelist$filename, 'f')
strsplit(imagelist$filename, 'f')[1]
strsplit(imagelist$filename, 'f')[[1]][1]
t(as.data.frame(strsplit(imagelist$filename, 'f')))
t(as.data.frame(strsplit(imagelist$filename, 'f')))[1]
t(as.data.frame(strsplit(imagelist$filename, 'f')))[,1]
mpairs <- t(as.data.frame(strsplit(imagelist$filename, 'f')))[,1]
mpairs <- gsub("' ", "", mpairs)
clear
mpairs
mpairs <- as.data.frame(mpairs)
View(mpairs)
rownames(mpairs) <- NULL
View(mpairs)
View(mpairs)
mpairs <- gsub("'", "", mpairs)
mpairs <- as.data.frame(mpairs)
rownames(mpairs) <- NULL
imagelist <- read.csv('~/Dropbox (MCAB Lab)/MCAB/Tasks/Trust Game (IN PROGRESS)/newfaces/imageList.csv', header = FALSE)
colnames(imagelist) <- 'filename'
imagelist$filename <- as.character(imagelist$filename)
mpairs <- t(as.data.frame(strsplit(imagelist$filename, 'f')))[,1]
mpairs <- gsub("' ", "", mpairs)
mpairs <- gsub("'", "", mpairs)
mpairs <- as.data.frame(mpairs)
rownames(mpairs) <- NULL
View(mpairs)
View(mpairs)
model <- gsub('\\d', '', mpairs)
model
imagelist <- read.csv('~/Dropbox (MCAB Lab)/MCAB/Tasks/Trust Game (IN PROGRESS)/newfaces/imageList.csv', header = FALSE)
colnames(imagelist) <- 'filename'
imagelist$filename <- as.character(imagelist$filename)
mpairs <- t(as.data.frame(strsplit(imagelist$filename, 'f')))[,1]
mpairs <- gsub("' ", "", mpairs)
mpairs <- gsub("'", "", mpairs)
model <- gsub('\\d', '', mpairs)
newmodel <- gsub('[ABC]', '', mpairs)
mpairs <- as.data.frame(mpairs, model, newmodel)
rownames(mpairs) <- NULL
mpairs <- as.data.frame(cbind(mpairs, model, newmodel))
View(mpairs)
rownames(mpairs) <- NULL
mpairs <- t(as.data.frame(strsplit(imagelist$filename, 'f')))[,2]
imagelist <- read.csv('~/Dropbox (MCAB Lab)/MCAB/Tasks/Trust Game (IN PROGRESS)/newfaces/imageList.csv', header = FALSE)
colnames(imagelist) <- 'filename'
imagelist$filename <- as.character(imagelist$filename)
mpairs <- t(as.data.frame(strsplit(imagelist$filename, 'f')))[,1]
mpairs <- gsub("' ", "", mpairs)
imagelist <- read.csv('~/Dropbox (MCAB Lab)/MCAB/Tasks/Trust Game (IN PROGRESS)/newfaces/imageList.csv', header = FALSE)
colnames(imagelist) <- 'filename'
imagelist$filename <- as.character(imagelist$filename)
mpairs <- t(as.data.frame(strsplit(imagelist$filename, 'f')))[,1]
mpairs <- gsub("' ", "", mpairs)
mpairs <- gsub("'", "", mpairs)
model <- gsub('\\d', '', mpairs)
newmodel <- gsub('[ABC]', '', mpairs)
mlevel <- t(as.data.frame(strsplit(imagelist$filename, 'f')))[,2]
as.numeric(mlevel)
mlevel <- gsub(" '", "", mlevel)
as.numeric(mlevel)
View(imagelist)
mlevel <- t(as.data.frame(strsplit(imagelist$filename, 'f')))[,2]
mlevel
mlevel <- gsub("'", "", mlevel)
mlevel <- t(as.data.frame(strsplit(imagelist$filename, 'f')))[,2]
mlevel <- gsub(" '", "", mlevel)
mlevel <- gsub("'", "", mlevel)
as.numeric(mlevel)
mpairs <- as.data.frame(cbind(mpairs, model, newmodel, mlevel))
rownames(mpairs) <- NULL
View(mpairs)
range(mpairs$mlevel)
range(mlevel)
View(imagelist)
View(mpairs)
mpairs[order(model, newmodel, mlevel)]
mpairs[order(model, newmodel, mlevel),]
mpairs <- mpairs[order(model, newmodel, mlevel),]
View(mpairs)
imagelist <- read.csv('~/Dropbox (MCAB Lab)/MCAB/Tasks/Trust Game (IN PROGRESS)/newfaces/imageList.csv', header = FALSE)
colnames(imagelist) <- 'filename'
imagelist$filename <- as.character(imagelist$filename)
mpairs <- t(as.data.frame(strsplit(imagelist$filename, 'f')))[,1]
mpairs <- gsub("' ", "", mpairs)
mpairs <- gsub("'", "", mpairs)
model <- gsub('\\d', '', mpairs)
newmodel <- gsub('[ABC]', '', mpairs)
mlevel <- t(as.data.frame(strsplit(imagelist$filename, 'f')))[,2]
mlevel <- gsub(" '", "", mlevel)
mlevel <- gsub("'", "", mlevel)
as.numeric(mlevel)
mpairs <- as.data.frame(cbind(mpairs, model, newmodel, mlevel))
rownames(mpairs) <- NULL
View(mpairs)
View(imagelist)
gsub(" ", "", imageList)
View(imagelist)
gsub(" ", "", imageList$filename)
gsub(" ", "", imagelist$filename)
imagelist$filename <- gsub("'", "",  imagelist$filename)
View(imagelist)
write.csv(imagelist, '~/Dropbox (MCAB Lab)/MCAB/Tasks/Trust Game (IN PROGRESS)/newfaces/cleanImageList.csv', row.names = FALSE)
write.csv(imagelist, '~/Dropbox (MCAB Lab)/MCAB/Tasks/Trust Game (IN PROGRESS)/newfaces/cleanImageList.csv', row.names = FALSE, header = FALSE)
# import libraries and set working directory
setwd('~/R_Projects/boundSkew1/')
# import data
d0 <- read.csv('Skew_boundary_raw_numeric.csv')
View(d0)
nrow(d0)
# remove first two rows (not data)
d0 <- d0[3:nrow(d0),]
View(d0)
grep['0_95_5', colnames(d0)]
grep('0_95_5', colnames(d0))
d0[32,]
d0[,32]
colname(d0[,32])
colnames(d0[,32])
View(d0)
View(d0)
grep('5_55_45', colnames(d0))
grep('0_95_5', colnames(d0))
grep('n5_55_45', colnames(d0))
View(d0)
# limit skew trials
grep('ResponseID', colnames(d0))
# limit skew trials
grep('ResponseId', colnames(d0))
# limit skew trials
d0[c(grep('ResponseId', colnames(d0)), grep('0_95_5', colnames(d0)):grep('n5_55_45', colnames(d0)) )]
# limit skew trials
d1 <- d0[c(grep('ResponseId', colnames(d0)), grep('0_95_5', colnames(d0)):grep('n5_55_45', colnames(d0)) )]
View(d1)
# remove incomplete records
complete.cases(d1)
View(d1)
# import data
d0 <- read.csv('Skew_boundary_raw_numeric.csv', na.strings = c('', 'NA'))
# remove first two rows (not data)
d0 <- d0[3:nrow(d0),]
# limit skew trials for now
d1 <- d0[c(grep('ResponseId', colnames(d0)), grep('0_95_5', colnames(d0)):grep('n5_55_45', colnames(d0)) )]
View(d1)
# remove incomplete records
complete.cases(d1)
# remove incomplete records
d1 <- d1[complete.cases(d1)]
# remove incomplete records
d1 <- d1[complete.cases(d1),]
View(d1)
library(reshape2)
# make data long
d2 <- melt(d1, id.vars = "ResponseId")
View(d2)
# make data long
d2 <- melt(d1, id.vars = 'ResponseId', variable.name = 'gamble', value.name = 'Accept')
View(d2)
# recode accept into 0 (for reject) and 1 (for accept)
d2$accept <- d2$accept - 1
View(d2)
# recode accept into 0 (for reject) and 1 (for accept)
d2$Accept <- d2$Accept - 1
# make data long
d2 <- melt(d1, id.vars = 'ResponseId', variable.name = 'gamble')
View(d2)
# recode value into acceptance - 0 (for reject) and 1 (for accept)
d2$accept <- d2$value - 1
# recode value into acceptance - 0 (for reject) and 1 (for accept)
d2$accept <- d2$value - seq(1, nrow(d2))
d2$value
# recode value into acceptance - 0 (for reject) and 1 (for accept)
d2$accept <- as.numeric(d2$value) - 1
View(d2)
View(d2)
unique(d2$gamble)
# add condition names
# valence (gain/loss/neutral)
d2$valence <- as.factor(t(as.data.frame(strsplit(as.character(d2$gamble), '_')))[,1])
View(d2)
unique(d2$valence)
# magnitude (0, 0.5, 5)
d2$magnitude <- as.factor(t(as.data.frame(strsplit(as.character(d2$gamble), '_')))[,2])
# add condition names
# valence (gain/loss/neutral)
d2$valence <- as.factor(t(as.data.frame(strsplit(as.character(d2$gamble), '_')))[,1])
# magnitude (0, 0.5, 5)
d2$magnitude <- as.factor(t(as.data.frame(strsplit(as.character(d2$gamble), '_')))[,1])
# deg of skew (low, medium, high)
d2$deg_skew <- as.factor(t(as.data.frame(strsplit(as.character(d2$gamble), '_')))[,2])
unique(d2$gamble)
# make data long
d2 <- melt(d1, id.vars = 'ResponseId', variable.name = 'gamble')
# add condition names
# valence (gain/loss/neutral)
d2$v1 <- as.factor(t(as.data.frame(strsplit(as.character(d2$gamble), '_')))[,1])
d2$valence[d2$v1 == 'X0'] <- 'neutral'
d2$valence[d2$v1 == 'X0'] <- 'neutral'
d2$valence[d2$v1 == 'X0.5'] <- 'gain'
d2$valence[d2$v1 == 'X5'] <- 'gain'
d2$valence[d2$v1 == 'n0.5'] <- 'loss'
d2$valence[d2$v1 == 'n5'] <- 'loss'
View(d2)
unique(d2$valence)
# magnitude (0, 0.5, 5)
d2$magnitude[d2$v1 == 'X0'] <- 0
d2$magnitude[d2$v1 == 'X0.5'] <- 0.5
d2$magnitude[d2$v1 == 'X5'] <- 5
d2$magnitude[d2$v1 == 'n0.5'] <- 0.5
d2$magnitude[d2$v1 == 'n5'] <- 5
View(d2)
d2$v1 <- NULL
# deg of skew (low, medium, high)
d2$deg_skew <- as.factor(t(as.data.frame(strsplit(as.character(d2$gamble), '_')))[,2])
# deg of skew (low, medium, high)
d2$v2 <- as.factor(t(as.data.frame(strsplit(as.character(d2$gamble), '_')))[,2])
d2$deg_skew <- [d2$v2 == '95'] <- 'Strongly-skewed'
d2$deg_skew <- [d2$v2 == '90'] <- 'Strongly-skewed'
d2$deg_skew <- [d2$v2 == '85'] <- 'Strongly-skewed'
d2$deg_skew <- [d2$v2 == '80'] <- 'Moderately-skewed'
d2$deg_skew <- [d2$v2 == '75'] <- 'Moderately-skewed'
d2$deg_skew <- [d2$v2 == '70'] <- 'Moderately-skewed'
d2$deg_skew <- [d2$v2 == '65'] <- 'Weakly-skewed'
d2$deg_skew <- [d2$v2 == '60'] <- 'Weakly-skewed'
d2$deg_skew <- [d2$v2 == '55'] <- 'Weakly-skewed'
View(d2)
d2$deg_skew[d2$v2 == '95'] <- 'Strongly-skewed'
d2$deg_skew[d2$v2 == '90'] <- 'Strongly-skewed'
d2$deg_skew[d2$v2 == '85'] <- 'Strongly-skewed'
d2$deg_skew[d2$v2 == '80'] <- 'Moderately-skewed'
d2$deg_skew[d2$v2 == '75'] <- 'Moderately-skewed'
d2$deg_skew[d2$v2 == '70'] <- 'Moderately-skewed'
d2$deg_skew[d2$v2 == '65'] <- 'Weakly-skewed'
d2$deg_skew[d2$v2 == '60'] <- 'Weakly-skewed'
d2$deg_skew[d2$v2 == '55'] <- 'Weakly-skewed'
unique(d2$gamble)
View(d2)
d2$deg_skew[d2$v2 == 95] <- 'Strongly-skewed'
View(d2)
d2$v2
# make data long
d2 <- melt(d1, id.vars = 'ResponseId', variable.name = 'gamble')
# recode value into acceptance - 0 (for reject) and 1 (for accept)
d2$accept <- as.numeric(d2$value) - 1
# add condition names
# valence (gain/loss/neutral)
d2$v1 <- as.factor(t(as.data.frame(strsplit(as.character(d2$gamble), '_')))[,1])
d2$valence[d2$v1 == 'X0'] <- 'neutral'
d2$valence[d2$v1 == 'X0.5'] <- 'gain'
d2$valence[d2$v1 == 'X5'] <- 'gain'
d2$valence[d2$v1 == 'n0.5'] <- 'loss'
d2$valence[d2$v1 == 'n5'] <- 'loss'
# magnitude (0, 0.5, 5)
d2$magnitude[d2$v1 == 'X0'] <- 0
d2$magnitude[d2$v1 == 'X0.5'] <- 0.5
d2$magnitude[d2$v1 == 'X5'] <- 5
d2$magnitude[d2$v1 == 'n0.5'] <- 0.5
d2$magnitude[d2$v1 == 'n5'] <- 5
d2$v1 <- NULL
# deg of skew (low, medium, high)
d2$v2 <- as.factor(t(as.data.frame(strsplit(as.character(d2$gamble), '_')))[,2])
levels(d2$v2)
d2$deg_skew[d2$v2 == 95] <- 'Strongly-skewed'
View(d2)
d2$deg_skew[d2$v2 == 95 | d2$v2 == 5] <- 'Strongly-skewed'
View(d2)
d2[which(d2$v2 == 5), ]
d2$deg_skew[d2$v2 == 90 | d2$v2 == 10] <- 'Strongly-skewed'
d2$deg_skew[d2$v2 == 85 | d2$v2 == 15] <- 'Strongly-skewed'
d2$deg_skew[d2$v2 == 95 | d2$v2 == 5] <- 'Strongly-skewed'
d2$deg_skew[d2$v2 == 90 | d2$v2 == 10] <- 'Strongly-skewed'
d2$deg_skew[d2$v2 == 85 | d2$v2 == 15] <- 'Strongly-skewed'
d2$deg_skew[d2$v2 == 80 | d2$v2 == 20] <- 'Moderately-skewed'
d2$deg_skew[d2$v2 == 75 | d2$v2 == 25] <- 'Moderately-skewed'
d2$deg_skew[d2$v2 == 70 | d2$v2 == 30] <- 'Moderately-skewed'
d2$deg_skew[d2$v2 == 65 | d2$v2 == 35] <- 'Weakly-skewed'
d2$deg_skew[d2$v2 == 60 | d2$v2 == 40] <- 'Weakly-skewed'
d2$deg_skew[d2$v2 == 55 | d2$v2 == 45] <- 'Weakly-skewed'
unique(d2$gamble)
View(d2)
d2$deg_skew[d2$v2 == 95 | d2$v2 == 5] <- 'Strong'
d2$deg_skew[d2$v2 == 90 | d2$v2 == 10] <- 'Strong'
d2$deg_skew[d2$v2 == 85 | d2$v2 == 15] <- 'Strong'
d2$deg_skew[d2$v2 == 80 | d2$v2 == 20] <- 'Moderate'
d2$deg_skew[d2$v2 == 75 | d2$v2 == 25] <- 'Moderate'
d2$deg_skew[d2$v2 == 70 | d2$v2 == 30] <- 'Moderate'
d2$deg_skew[d2$v2 == 65 | d2$v2 == 35] <- 'Weak'
d2$deg_skew[d2$v2 == 60 | d2$v2 == 40] <- 'Weak'
d2$deg_skew[d2$v2 == 55 | d2$v2 == 45] <- 'Weak'
d2$v2 <- NULL
View(d2)
#save data frame
write.csv('boundSkew1Long.csv', row.names = FALSE)
#save data frame
write.csv(d2, 'boundSkew1Long.csv', row.names = FALSE)
