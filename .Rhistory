View(d1)
# make magnitude a factor
d1$magnitude <- factor(d1$magnitude)
View(d1)
# age effects on acceptance rates
ggplot(d0, aes(Age, accept, colour = deg_skew, fill = deg_skew)) + geom_smooth(method=lm) +
theme(legend.position = 'top') + facet_grid(magnitude ~ valence)
# age effects on acceptance rates
ggplot(d1, aes(Age, accept, colour = deg_skew, fill = deg_skew)) + geom_smooth(method=lm) +
theme(legend.position = 'top') + facet_grid(magnitude ~ valence)
source(here('scr', 'SummarySE.R'))
# age effects on acceptance rates
ggplot(d1, aes(Age, accept, colour = deg_skew, fill = deg_skew)) + geom_smooth(method=lm) +
theme(legend.position = 'top') + facet_grid(magnitude ~ valence)
library(ggplot2)
# age effects on acceptance rates
ggplot(d1, aes(Age, accept, colour = deg_skew, fill = deg_skew)) + geom_smooth(method=lm) +
theme(legend.position = 'top') + facet_grid(magnitude ~ valence)
# load data
dt <- read.csv(here("data", "bound_skew1_data.csv"))
grep('Age', colnames(dt))
# separate skew
d0 <- isolate_skew(dt,c(9,12),20:79)
View(d0)
d1 <- clean_skew(d0)
View(d1)
# make long
d1 <- melt(data, id.vars = c('ResponseId','Age'), variable.name = 'gamble', value.name = 'response')
d1 <- clean_skew(d0)
View(d1)
source(here('scr', 'clean_skew.R'))
# load data
dt <- read.csv(here("data", "bound_skew1_data.csv"))
# separate skew
d0 <- isolate_skew(dt,c(9,12),20:79)
d1 <- clean_skew(d0)
View(d1)
d4 <- d3[c(1:3,5:8,4)]
source(here('scr', 'clean_skew.R'))
source(here('scr', 'SummarySE.R'))
# load data
dt <- read.csv(here("data", "bound_skew1_data.csv"))
# separate skew
d0 <- isolate_skew(dt,c(9,12),20:79)
d1 <- clean_skew(d0)
View(d1)
# reorder deg_skew factor
d1$deg_skew <- factor(d1$deg_skew, levels = c('Symmetric', 'Weak', 'Moderate', 'Strong'))
View(d1)
# make magnitude a factor
d1$magnitude <- factor(d1$magnitude)
# age effects on acceptance rates
ggplot(d1, aes(Age, accept, colour = deg_skew, fill = deg_skew)) + geom_smooth(method=lm) +
theme(legend.position = 'top') + facet_grid(magnitude ~ valence)
View(d1)
# recode response to acceptance
d4$accept <- d4$response -1
source(here('scr', 'clean_skew.R'))
# load data
dt <- read.csv(here("data", "bound_skew1_data.csv"))
# separate skew
d0 <- isolate_skew(dt,c(9,12),20:79)
d1 <- clean_skew(d0)
View(d1)
data <- d0
# make long
d1 <- melt(data, id.vars = c('ResponseId','Age'), variable.name = 'gamble', value.name = 'response')
as.factor(t(as.data.frame(strsplit(as.character(d1$gamble), '_')))[,1])
d1$v1 <- as.factor(t(as.data.frame(strsplit(as.character(d1$gamble), '_')))[,1])
# valence (gain/loss/neutral)
d1$valence[d1$v1 == 'X0'] <- 'neutral'
d1$valence[d1$v1 == 'X0.5'] <- 'gain'
d1$valence[d1$v1 == 'X5'] <- 'gain'
d1$valence[d1$v1 == 'n0.5'] <- 'loss'
d1$valence[d1$v1 == 'n5'] <- 'loss'
# magnitude (0, 0.5, 5)
d1$magnitude[d1$v1 == 'X0'] <- 0
d1$magnitude[d1$v1 == 'X0.5'] <- 0.5
d1$magnitude[d1$v1 == 'X5'] <- 5
d1$magnitude[d1$v1 == 'n0.5'] <- 0.5
d1$magnitude[d1$v1 == 'n5'] <- 5
d1$v1 <- NULL
# deg of skew (low, medium, high)
d1$v2 <- as.factor(t(as.data.frame(strsplit(as.character(d1$gamble), '_')))[,2])
d1$deg_skew[d1$v2 == 95 | d1$v2 == 5] <- 'Strong'
d1$deg_skew[d1$v2 == 90 | d1$v2 == 10] <- 'Strong'
d1$deg_skew[d1$v2 == 85 | d1$v2 == 15] <- 'Strong'
d1$deg_skew[d1$v2 == 80 | d1$v2 == 20] <- 'Moderate'
d1$deg_skew[d1$v2 == 75 | d1$v2 == 25] <- 'Moderate'
d1$deg_skew[d1$v2 == 70 | d1$v2 == 30] <- 'Moderate'
d1$deg_skew[d1$v2 == 65 | d1$v2 == 35] <- 'Weak'
d1$deg_skew[d1$v2 == 60 | d1$v2 == 40] <- 'Weak'
d1$deg_skew[d1$v2 == 55 | d1$v2 == 45] <- 'Weak'
d1$deg_skew[d1$v2 == 50 | d1$v2 == 50] <- 'Symmetric'
# dir of skew (positive or negative)
d1$v2 <- as.numeric(as.character(d1$v2))
d1$dir_skew[d1$v2 > 50] <- 'Negative'
d1$dir_skew[d1$v2 < 50] <- 'Positive'
d1$dir_skew[d1$v2 == 50] <- 'Symmetric'
d1$v2 <- NULL
# remove incomplete trials
d2 <- d1[complete.cases(d1),]
d3 <- d2[order(d2$ResponseId, d2$deg_skew),]
d4 <- d3[c(1:3,5:8,4)]
View(d4)
# recode response to acceptance
d4$accept <- d4$response - 1
View(d4)
source(here('scr', 'clean_skew.R'))
# load source functiozns
source(here('scr', 'isolate_skew.R'))
source(here('scr', 'clean_skew.R'))
source(here('scr', 'SummarySE.R'))
# load data
dt <- read.csv(here("data", "bound_skew1_data.csv"))
# separate skew
d0 <- isolate_skew(dt,c(9,12),20:79)
d1 <- clean_skew(d0)
View(dt)
d1
data <- d0
library(reshape2)
# make long
d1 <- melt(data, id.vars = c('ResponseId','Age'), variable.name = 'gamble', value.name = 'response')
as.factor(t(as.data.frame(strsplit(as.character(d1$gamble), '_')))[,1])
d1$v1 <- as.factor(t(as.data.frame(strsplit(as.character(d1$gamble), '_')))[,1])
# valence (gain/loss/neutral)
d1$valence[d1$v1 == 'X0'] <- 'neutral'
d1$valence[d1$v1 == 'X0.5'] <- 'gain'
d1$valence[d1$v1 == 'X5'] <- 'gain'
d1$valence[d1$v1 == 'n0.5'] <- 'loss'
d1$valence[d1$v1 == 'n5'] <- 'loss'
# magnitude (0, 0.5, 5)
d1$magnitude[d1$v1 == 'X0'] <- 0
d1$magnitude[d1$v1 == 'X0.5'] <- 0.5
d1$magnitude[d1$v1 == 'X5'] <- 5
d1$magnitude[d1$v1 == 'n0.5'] <- 0.5
d1$magnitude[d1$v1 == 'n5'] <- 5
d1$v1 <- NULL
# load required packages
library(here)
library(ggplot2)
# load source functiozns
source(here('scr', 'isolate_skew.R'))
source(here('scr', 'clean_skew.R'))
source(here('scr', 'SummarySE.R'))
# load data
dt <- read.csv(here("data", "bound_skew1_data.csv"))
# separate skew
d0 <- isolate_skew(dt,c(9,12),20:79)
d1 <- clean_skew(d0)
data <- d0
library(reshape2)
# make long
d1 <- melt(data, id.vars = c('ResponseId','Age'), variable.name = 'gamble', value.name = 'response')
View(d1)
d1$v1 <- as.factor(t(as.data.frame(strsplit(as.character(d1$gamble), '_')))[,1])
# valence (gain/loss/neutral)
d1$valence[d1$v1 == 'X0'] <- 'neutral'
d1$valence[d1$v1 == 'X0.5'] <- 'gain'
d1$valence[d1$v1 == 'X5'] <- 'gain'
d1$valence[d1$v1 == 'n0.5'] <- 'loss'
d1$valence[d1$v1 == 'n5'] <- 'loss'
# magnitude (0, 0.5, 5)
d1$magnitude[d1$v1 == 'X0'] <- 0
d1$magnitude[d1$v1 == 'X0.5'] <- 0.5
d1$magnitude[d1$v1 == 'X5'] <- 5
d1$magnitude[d1$v1 == 'n0.5'] <- 0.5
d1$magnitude[d1$v1 == 'n5'] <- 5
d1$v1 <- NULL
# deg of skew (low, medium, high)
d1$v2 <- as.factor(t(as.data.frame(strsplit(as.character(d1$gamble), '_')))[,2])
d1$deg_skew[d1$v2 == 95 | d1$v2 == 5] <- 'Strong'
d1$deg_skew[d1$v2 == 90 | d1$v2 == 10] <- 'Strong'
d1$deg_skew[d1$v2 == 85 | d1$v2 == 15] <- 'Strong'
d1$deg_skew[d1$v2 == 80 | d1$v2 == 20] <- 'Moderate'
d1$deg_skew[d1$v2 == 75 | d1$v2 == 25] <- 'Moderate'
d1$deg_skew[d1$v2 == 70 | d1$v2 == 30] <- 'Moderate'
d1$deg_skew[d1$v2 == 65 | d1$v2 == 35] <- 'Weak'
d1$deg_skew[d1$v2 == 60 | d1$v2 == 40] <- 'Weak'
d1$deg_skew[d1$v2 == 55 | d1$v2 == 45] <- 'Weak'
d1$deg_skew[d1$v2 == 50 | d1$v2 == 50] <- 'Symmetric'
# dir of skew (positive or negative)
d1$v2 <- as.numeric(as.character(d1$v2))
d1$dir_skew[d1$v2 > 50] <- 'Negative'
d1$dir_skew[d1$v2 < 50] <- 'Positive'
d1$dir_skew[d1$v2 == 50] <- 'Symmetric'
d1$v2 <- NULL
# remove incomplete trials
d2 <- d1[complete.cases(d1),]
d3 <- d2[order(d2$ResponseId, d2$deg_skew),]
d4 <- d3[c(1:3,5:8,4)]
# score skew data
# 6.10.19 KLS
# load required packages
library(here)
library(ggplot2)
# load source functiozns
source(here('scr', 'isolate_skew.R'))
source(here('scr', 'clean_skew.R'))
source(here('scr', 'SummarySE.R'))
# set hard-coded variables
# load data
dt <- read.csv(here("data", "bound_skew1_data.csv"))
# separate skew
d0 <- isolate_skew(dt,c(9,12),20:79)
d1 <- clean_skew(d0)
# load required packages
library(here)
library(ggplot2)
# load source functiozns
source(here('scr', 'isolate_skew.R'))
source(here('scr', 'clean_skew.R'))
source(here('scr', 'SummarySE.R'))
# load data
dt <- read.csv(here("data", "bound_skew1_data.csv"))
# separate skew
d0 <- isolate_skew(dt,c(9,12),20:79)
d1 <- clean_skew(d0)
View(d1)
# recode response to acceptance
d4$accept <- d4$response - 1
# recode response to acceptance
d1$accept <- d1$response - 1
View(d1)
# reorder deg_skew factor
d1$deg_skew <- factor(d1$deg_skew, levels = c('Symmetric', 'Weak', 'Moderate', 'Strong'))
# make magnitude a factor
d1$magnitude <- factor(d1$magnitude)
# age effects on acceptance rates
ggplot(d1, aes(Age, accept, colour = deg_skew, fill = deg_skew)) + geom_smooth(method=lm) +
theme(legend.position = 'top') + facet_grid(magnitude ~ valence)
# create summary - main effect of degree of skewness
d2 <- summarySE(data=d1, measurevar = 'accept', groupvars='deg_skew')
View(d2)
ggplot(d2, aes(deg_skew, accept, fill = deg_skew)) + geom_bar(position=position_dodge(), stat='identity') +
geom_errorbar(aes(ymin=accept - se, ymax = accept + se), width = .2, position=position_dodge(.9)) +
theme(legend.position = 'none')
# create summary - add interaction with valence of gamble
d3 <- summarySE(data=d1, measurevar = 'accept', groupvars=c('valence','deg_skew'))
ggplot(d3, aes(valence, accept, fill = deg_skew)) + geom_bar(position=position_dodge(), stat='identity') +
geom_errorbar(aes(ymin=accept - se, ymax = accept + se), width = .2, position=position_dodge(.9)) +
theme(legend.position = 'top')
# create summary - add interaction with magnitude of gamble
d4 <- summarySE(data=d1, measurevar = 'accept', groupvars=c('magnitude','deg_skew'))
ggplot(d4, aes(magnitude, accept, fill = deg_skew)) + geom_bar(position=position_dodge(), stat='identity') +
geom_errorbar(aes(ymin=accept - se, ymax = accept + se), width = .2, position=position_dodge(.9)) +
theme(legend.position = 'top')
# create summary - 3 way interaction
d5 <- summarySE(data=d1, measurevar = 'accept', groupvars=c('valence', 'magnitude', 'deg_skew'))
ggplot(d5, aes(valence, accept, fill = deg_skew)) + geom_bar(position=position_dodge(), stat='identity') +
geom_errorbar(aes(ymin=accept - se, ymax = accept + se), width = .2, position=position_dodge(.9)) +
theme(legend.position = 'top') + facet_wrap(~ magnitude)
# load required packages
library(here)
library(ggplot2)
# load source functiozns
source(here('scr', 'isolate_skew.R'))
here()
# load source functiozns
source(here('scr', 'isolate_skew.R'))
source(here('scr', 'clean_skew.R'))
source(here('scr', 'SummarySE.R'))
# load data
dt <- read.csv(here("data", "bound_skew1_data.csv"))
# separate skew
d0 <- isolate_skew(dt,c(9,12),20:79)
d1 <- clean_skew(d0)
# recode response to acceptance
d1$accept <- d1$response - 1
# reorder deg_skew factor
d1$deg_skew <- factor(d1$deg_skew, levels = c('Symmetric', 'Weak', 'Moderate', 'Strong'))
# make magnitude a factor
d1$magnitude <- factor(d1$magnitude)
# age effects on acceptance rates
ggplot(d1, aes(Age, accept, colour = deg_skew, fill = deg_skew)) + geom_smooth(method=lm) +
theme(legend.position = 'top') + facet_grid(magnitude ~ valence)
# create summary - main effect of degree of skewness
d2 <- summarySE(data=d1, measurevar = 'accept', groupvars='deg_skew')
ggplot(d2, aes(deg_skew, accept, fill = deg_skew)) + geom_bar(position=position_dodge(), stat='identity') +
geom_errorbar(aes(ymin=accept - se, ymax = accept + se), width = .2, position=position_dodge(.9)) +
theme(legend.position = 'none')
# create summary - add interaction with valence of gamble
d3 <- summarySE(data=d1, measurevar = 'accept', groupvars=c('valence','deg_skew'))
ggplot(d3, aes(valence, accept, fill = deg_skew)) + geom_bar(position=position_dodge(), stat='identity') +
geom_errorbar(aes(ymin=accept - se, ymax = accept + se), width = .2, position=position_dodge(.9)) +
theme(legend.position = 'top')
# create summary - add interaction with magnitude of gamble
d4 <- summarySE(data=d1, measurevar = 'accept', groupvars=c('magnitude','deg_skew'))
ggplot(d4, aes(magnitude, accept, fill = deg_skew)) + geom_bar(position=position_dodge(), stat='identity') +
geom_errorbar(aes(ymin=accept - se, ymax = accept + se), width = .2, position=position_dodge(.9)) +
theme(legend.position = 'top')
# create summary - 3 way interaction
d5 <- summarySE(data=d1, measurevar = 'accept', groupvars=c('valence', 'magnitude', 'deg_skew'))
ggplot(d5, aes(valence, accept, fill = deg_skew)) + geom_bar(position=position_dodge(), stat='identity') +
geom_errorbar(aes(ymin=accept - se, ymax = accept + se), width = .2, position=position_dodge(.9)) +
theme(legend.position = 'top') + facet_wrap(~ magnitude)
# load required packages
library(here)
# load data
dt <- read.csv('~/Dropbox (MCAB Lab)/MCAB/data/skew2/data/skew_full_raw.csv')
dt <- dt[-c(10:17)]
dd <- t(dt[1,])
dt <- dt[-c(1:2),]
dt$Age <- as.integer(as.character(dt$Age))
dt$Age <- dt$Age + 19
write.csv(dd, here("data", "bound_skew1_data_dictionary.csv"), row.names = FALSE)
write.csv(dt, here("data", "bound_skew1_data.csv"), row.names = FALSE)
View(dd)
# load required packages
library(here)
# load required packages
library(here)
# load data
dt <- read.csv('~/Dropbox (MCAB Lab)/MCAB/data/skew2/data/skew_full_raw.csv')
dt <- dt[-c(10:17)]
dd <- t(dt[1,])
dt <- dt[-c(1:2),]
dt$Age <- as.integer(as.character(dt$Age))
dt$Age <- dt$Age + 19
# Clean skew data
# 6.10.19 KLS
install.packages(here)
?here
# Clean skew data
# 6.10.19 KLS
install.packages("here")
# load required packages
library(here)
# load data
dt <- read.csv('~/Dropbox (MCAB Lab)/MCAB/data/skew2/data/skew_full_raw.csv')
dt <- dt[-c(10:17)]
dd <- t(dt[1,])
dt <- dt[-c(1:2),]
dt$Age <- as.integer(as.character(dt$Age))
dt$Age <- dt$Age + 19
# load required packages
library(here)
# load source functions
source(here("scr", "isolate_measure.R"))
# load data
dt <- read.csv(here("data", "bound_skew1_data.csv"))
dd <- read.csv(here("data", "bound_skew1_data_dictionary.csv"))
graph_lit <- isolate_measure(dt, c("how good", "graph", "picture", dd))
graph_lit <- isolate_measure(dt, c("how good", "graph", "picture"), dd))
graph_lit <- isolate_measure(dt, c("how good", "graph", "picture"), dd)
# AVI # Ask greg about scoring
avi <- isolate_measure(dt, "ACTUALLY", dd)
?which
View(dd)
graph_lit <- isolate_measure(dt, "how good", dd)
# load required packages
library(here)
# load source functions
source(here("scr", "isolate_measure.R"))
# load data
dt <- read.csv(here("data", "bound_skew1_data.csv"))
dd <- read.csv(here("data", "bound_skew1_data_dictionary.csv"))
# AVI # Ask greg about scoring
avi <- isolate_measure(dt, "ACTUALLY", dd)
View(avi)
?grep
grep("how good", dt)
grep("good", dt)
grep(good, dt)
View(dt)
grep("good", dd)
View(dt)
dt[,c(9,grep(term, datadict[,2]))
grep(term, datadict[,2])
grep("good", dd[,2])
first <- grep(first_term, datadict[,2])
first <- grep(first_term, dd[,2])
first <- grep("how good", datadict[,2])
first <- grep("how good", dd[,2])
grep("good", dd[,2])
first
first <- grep("how good", dd[,2])[1]
class(first)
first <- as.list(grep("how good", dd[,2]))
View(first)
grep("how good", dd[,2])
first <- as.list(grep("good", dd[,2]))
View(first)
View(first)
first <- as.list(grep("good", dd[,2]))[1]
View(first)
first <- as.data.frame(grep("good", dd[,2]))[1]
View(first)
first <- as.data.frame(grep("good", dd[,2]))
View(first)
View(dd)
last <- as.data.frame(grep("when reading", dd[,2]))
View(last)
last <- as.data.frame(grep("When reading", dd[,2]))
View(last)
first[1]
first[,1]
first[1,]
last[len(last),]
last[length(last),]
data[,c(9,first[1,]:last[length(last),])]
f1 <- first[1,]
l1 <- last[length(last),]
f1
data[,c(9,f1:l1])]
data[,c(9, f1:l1)]
class(f1)
data[,c(9, 143:152)]
dt[,c(9, 143:152)]
dt[,c(9, f1:l1)]
first <- as.data.frame(grep("good", dd[,2]))
last <- as.data.frame(grep("When reading", dd[,2]))
f1 <- first[1,]
l1 <- last[length(last),]
dt[,c(9, f1:l1)]
isolate_measure2 <- function(data, first_term, last_term, datadict) {
first <- as.data.frame(grep(first_term, datadict[,2]))
last <- as.data.frame(grep(last_term, datadict[,2]))
#first <- as.data.frame(grep("good", dd[,2]))
#last <- as.data.frame(grep("When reading", dd[,2]))
f1 <- first[1,]
l1 <- last[length(last),]
dt[,c(9, f1:l1)]
}
isolate_measure2(dt,"good", "When reading", dd)
?gsub
# load required packages
library(here)
# load source functions
source(here("scr", "isolate_measure.R"))
# load data
dt <- read.csv(here("data", "bound_skew1_data.csv"))
dd <- read.csv(here("data", "bound_skew1_data_dictionary.csv"))
# AVI # Ask greg about scoring
avi <- isolate_measure(dt, "ACTUALLY", dd)
avi <- add_correct_avi_labels(avi, "ACTUALLY", dd)
View(avi)
isolate_measure2 <- function(data, first_term, last_term, datadict) {
#input:
#data = data table
#first_term = first term in questionnaire section (character)
#last_term = last term in questionnaire section (character)
#datadict = data dictionary with only 2 columns *UPDATE WHEN DATA DICT IS UPDATED
first <- as.data.frame(grep(first_term, datadict[,2]))
last <- as.data.frame(grep(last_term, datadict[,2]))
f1 <- first[1,]
l1 <- last[length(last),]
data[,c(9, f1:l1)]
}
isolate_measure2(dt,"good", "When reading", dd)
as.character(dd[grep("ACTUALLY", dd[,2]),2])
fst <- as.data.frame(grep("How good", dd[,2]))
lst <- as.data.frame(grep("When reading", datadict[,2]))
lst <- as.data.frame(grep("When reading", dd[,2]))
f1 <- fst[1,]
l1 <- lst[length(lst),]
ratings <- as.character(dd[f1:l1,2])
ratings
colnames(measure) <- c('SubID', ratings)
c('SubID', ratings)
add_graph_lit_labels <- function(measure, first_term, last_term, datadict ) {
#isolate_measure2(graph_lit)# would be great to use this line if function can be auto input rather than typing out again
fst <- as.data.frame(grep(first_term, datadict[,2]))
lst <- as.data.frame(grep(last_term, datadict[,2]))
#fst <- as.data.frame(grep("How good", dd[,2]))
#lst <- as.data.frame(grep("When reading", dd[,2]))
f1 <- fst[1,]
l1 <- lst[length(lst),]
ratings <- as.character(dd[f1:l1,2])
colnames(measure) <- c('SubID', ratings)
return(measure)
}
graph_lit <- isolate_measure2(dt, "how good", dd)
graph_lit <- isolate_measure2(dt, "How good", "When reading" dd)
graph_lit <- isolate_measure2(dt, "How good", "When reading", dd)
View(graph_lit)
graph_lit <- add_graph_lit_labels(graph_lit, "How good", "When reading", dd)
View(graph_lit)
score_avi <- function(avi) {
avi$hap <- (avi$Enthusiastic + avi$Excited + avi$Strong) / 3
avi$lap <- (avi$Calm + avi$Relaxed + avi$Peaceful) / 3
avi$la <- (avi$Quiet + avi$Passive + avi$Still) / 3
#avi$pos <- (avi$Euphoric + avi$Elated + avi$Rested ) /3 # We don't think this is correct
avi$lan <- (avi$Dull + avi$Sleepy + avi$Sluggish) / 3
avi$han <- (avi$Fearful + avi$Hostile + avi$Nervous) /3
avi$ha <- (avi$Aroused + avi$Surprised + avi$Astonished) / 3
#avi$neg <- (avi$Lonely + avi$Inactive + avi$Idle ) /3 # We don't think this is correct
return(avi[,c(1,26:31)])
}
# AVI # Ask greg about scoring
avi <- isolate_measure(dt, "ACTUALLY", dd)
avi <- add_correct_avi_labels(avi, "ACTUALLY", dd)
avi <- score_avi(avi)
View(avi)
# load required packages
library(here)
# load source functions
source(here("scr", "isolate_measure.R"))
# load data
dt <- read.csv(here("data", "bound_skew1_data.csv"))
dd <- read.csv(here("data", "bound_skew1_data_dictionary.csv"))
# load required packages
library(here)
# load source functions
source(here("scr", "isolate_measure.R"))
# load data
dt <- read.csv(here("data", "bound_skew1_data.csv"))
dd <- read.csv(here("data", "bound_skew1_data_dictionary.csv"))
# Numeracy
num <- isolate_measure2(dt, "Imagine that", "Suppose that", dd)
View(num)
