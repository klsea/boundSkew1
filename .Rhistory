lose.money_color <- colorize_variable(d0$lose.money)
p1 <- ggplot(d0, aes(Age, lose.money))
p2 <- ggplot(d0, aes(lose.money, fill = lose.money_color))
fancy_graph(p1,p2, lose.money_color, 'Lose Money')
win.likely_color <- colorize_variable(d0$win.likely)
p1 <- ggplot(d0, aes(Age, win.likely))
p2 <- ggplot(d0, aes(win.likely, fill = win.likely_color))
fancy_graph(p1,p2, win.likely_color, 'Win Likely')
lose.likely_color <- colorize_variable(d0$lose.likely)
p1 <- ggplot(d0, aes(Age, lose.likely))
p2 <- ggplot(d0, aes(lose.likely, fill = lose.likely_color))
fancy_graph(p1,p2, lose.likely_color, 'Lose Likely')
#
d0$diffstrategy <- d0$math - d0$gut
ggplot(d0, aes(Age, diffstrategy)) + geom_point() + geom_smooth(method = 'lm', fill = 'blue') +
geom_smooth(method = "lm", formula = y ~ x + I(x^2), aes(color = 'red', fill = 'red'))
rm(p1,p2)
View(d0)
View(dt)
source(here('scr', 'SummarizeSE.R'))
source(here('scr', 'SummarySE.R'))
View(summarySE)
# Graph means
colMeans(d0)
# Graph means
d1 <- colMeans(d0)
# Graph means
d1 <- cbind(colMeans(d0), colSD(d0))
library(matrixStats)
install.packages(matrixStats)
install.packages('matrixStats')
library(matrixStats)
# Graph means
d1 <- cbind(colMeans(d0), colSds(d0))
apply(d0, 2, sd)
# Graph means
d1 <- cbind(colMeans(d0), apply(d0, 2, sd))
View(d1)
nrow(d0)
sqrt(nrow(d0))
# Graph means
d1 <- cbind(colMeans(d0), apply(d0, 2, sd), apply(d0, 2, sd)/qrt(nrow(d0)))
# Graph means
d1 <- cbind(colMeans(d0), apply(d0, 2, sd), apply(d0, 2, sd)/sqrt(nrow(d0)))
View(d1)
colnames(d1) <- c('Mean', 'SD', 'SE')
View(d1)
# Graph means
d1 <- cbind(colMeans(d0), apply(d0, 2, sd), apply(d0, 2, sd)/sqrt(nrow(d0)))[3:rnow(d1),]
# Graph means
d1 <- cbind(colMeans(d0), apply(d0, 2, sd), apply(d0, 2, sd)/sqrt(nrow(d0)))[3:nrow(d1),]
View(d1)
colnames(d1) <- c('Mean', 'SD', 'SE')
View(d1)
ggplot(d1, aes(Means))
View(d1)
names <- rownames(d1)
rownames(d1) <- NULL
d1 <- cbind(names, d1)
View(d1)
ggplot(d1, aes(names, Means)) + geom_bar()
View(d1)
d1 <- data.frame(d1)
View(d1)
ggplot(d1, aes(names, Means)) + geom_bar()
ggplot(d1, aes(names, Mean)) + geom_bar()
ggplot(d1, aes(names, Mean)) + geom_bar(stat='identity')
d1$Mean <- as.numeric(as.character(d1$Mean))
d1$SD <- as.numeric(as.character(d1$SD))
d1$SE <- as.numeric(as.character(d1$SE))
ggplot(d1, aes(names, Mean)) + geom_bar(stat='identity')
ggplot(d1, aes(names, Mean, fill = names)) + geom_bar(stat='identity')
ggplot(d1, aes(names, Mean, fill = names)) + geom_bar(stat='identity') +
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean + SE))
ggplot(d1, aes(names, Mean, fill = names)) + geom_bar(stat='identity') +
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean + SE), width = .2, position=position_dodge(.9))
d1$names <- factor(d1$names, levels = 'gut', 'math', 'win.money', 'lose.money', 'win.likely', 'lose.likely')
ggplot(d1, aes(names, Mean, fill = names)) + geom_bar(stat='identity') +
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean + SE), width = .2, position=position_dodge(.9))
d1$names <- factor(d1$names, levels = c('gut', 'math', 'win.money', 'lose.money',
'win.likely', 'lose.likely'))
ggplot(d1, aes(names, Mean, fill = names)) + geom_bar(stat='identity') +
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean + SE), width = .2, position=position_dodge(.9))
ggplot(d1, aes(names, Mean, fill = names)) + geom_bar(stat='identity') +
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean + SE), width = .2, position=position_dodge(.9)) +
theme_minimal() + theme(legend.position = NULL)
ggplot(d1, aes(names, Mean, fill = names)) + geom_bar(stat='identity') +
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean + SE), width = .2, position=position_dodge(.9)) +
theme_minimal() + theme(legend.position = 'none')
ggplot(d1, aes(names, Mean, fill = names)) + geom_bar(stat='identity') +
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean + SE), width = .2, position=position_dodge(.9)) +
theme_minimal() + theme(legend.position = 'none') + xlab("Strategy") + ylab('Average Rating') +
expand_limits(y=c(1,5))
# graph strategy data
# 10.29.19 KLS
# load required packages
library(here)
library(ggplot2)
library(matrixStats)
# load source functions
source(here('scr', 'isolate_skew.R'))
source(here('scr', 'multiplot.R'))
source(here('scr', 'colorize_variable.R'))
source(here('scr', 'SummarySE.R'))
# set hard-coded variables
# load data
dt <- read.csv(here("data", "bound_skew1_data.csv"))
# separate strategy
d0 <- isolate_skew(dt,c(1,2),70:75)
colnames(d0) <- c('ID', 'Age', 'gut', 'math', 'win.money', 'lose.money', 'win.likely', 'lose.likely')
# Graph means
d1 <- cbind(colMeans(d0), apply(d0, 2, sd), apply(d0, 2, sd)/sqrt(nrow(d0)))[3:nrow(d1),]
colnames(d1) <- c('Mean', 'SD', 'SE')
names <- rownames(d1); rownames(d1) <- NULL
d1 <- cbind(names, d1)
d1 <- data.frame(d1)
d1$Mean <- as.numeric(as.character(d1$Mean))
d1$SD <- as.numeric(as.character(d1$SD))
d1$SE <- as.numeric(as.character(d1$SE))
d1$names <- factor(d1$names, levels = c('gut', 'math', 'win.money', 'lose.money',
'win.likely', 'lose.likely'))
ggplot(d1, aes(names, Mean, fill = names)) + geom_bar(stat='identity') +
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean + SE), width = .2, position=position_dodge(.9)) +
theme_minimal() + theme(legend.position = 'none') + xlab("Strategy") + ylab('Average Rating') +
expand_limits(y=c(1,5))
View(d0)
# Graph means
d1 <- cbind(colMeans(d0), apply(d0, 2, sd), apply(d0, 2, sd)/sqrt(nrow(d0)))[3:nrow(d1),]
colnames(d1) <- c('Mean', 'SD', 'SE')
names <- rownames(d1); rownames(d1) <- NULL
d1 <- cbind(names, d1)
d1 <- data.frame(d1)
d1$Mean <- as.numeric(as.character(d1$Mean))
d1$SD <- as.numeric(as.character(d1$SD))
d1$SE <- as.numeric(as.character(d1$SE))
d1$names <- factor(d1$names, levels = c('gut', 'math', 'win.money', 'lose.money',
'win.likely', 'lose.likely'))
# Graph means
d1 <- cbind(colMeans(d0), apply(d0, 2, sd), apply(d0, 2, sd)/sqrt(nrow(d0)))[3:nrow(d1),]
# Graph means
d1 <- cbind(colMeans(d0), apply(d0, 2, sd), apply(d0, 2, sd)/sqrt(nrow(d0)))[3:nrow(d0),]
# Graph means
d1 <- cbind(colMeans(d0), apply(d0, 2, sd), apply(d0, 2, sd)/sqrt(nrow(d0)))
d1 <- d1[3:nrow(d1)]
colnames(d1) <- c('Mean', 'SD', 'SE')
names <- rownames(d1); rownames(d1) <- NULL
d1 <- cbind(names, d1)
d1 <- data.frame(d1)
d1$Mean <- as.numeric(as.character(d1$Mean))
d1$SD <- as.numeric(as.character(d1$SD))
d1$SE <- as.numeric(as.character(d1$SE))
d1$names <- factor(d1$names, levels = c('gut', 'math', 'win.money', 'lose.money',
'win.likely', 'lose.likely'))
ggplot(d1, aes(names, Mean, fill = names)) + geom_bar(stat='identity') +
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean + SE), width = .2, position=position_dodge(.9)) +
theme_minimal() + theme(legend.position = 'none') + xlab("Strategy") + ylab('Average Rating') +
expand_limits(y=c(1,5))
View(d1)
# Graph means
d1 <- cbind(colMeans(d0), apply(d0, 2, sd), apply(d0, 2, sd)/sqrt(nrow(d0)))
d1 <- d1[3:nrow(d1),]
colnames(d1) <- c('Mean', 'SD', 'SE')
names <- rownames(d1); rownames(d1) <- NULL
d1 <- cbind(names, d1)
d1 <- data.frame(d1)
d1$Mean <- as.numeric(as.character(d1$Mean))
d1$SD <- as.numeric(as.character(d1$SD))
d1$SE <- as.numeric(as.character(d1$SE))
d1$names <- factor(d1$names, levels = c('gut', 'math', 'win.money', 'lose.money',
'win.likely', 'lose.likely'))
ggplot(d1, aes(names, Mean, fill = names)) + geom_bar(stat='identity') +
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean + SE), width = .2, position=position_dodge(.9)) +
theme_minimal() + theme(legend.position = 'none') + xlab("Strategy") + ylab('Average Rating') +
expand_limits(y=c(1,5))
ggplot(d1[1:2,], aes(names, Mean, fill = names)) + geom_bar(stat='identity') +
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean + SE), width = .2, position=position_dodge(.9)) +
theme_minimal() + theme(legend.position = 'none') + xlab("Strategy") + ylab('Average Rating') +
expand_limits(y=c(1,5))
plot <- geom_bar(stat='identity') +
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean + SE), width = .2, position=position_dodge(.9)) +
theme_minimal() + theme(legend.position = 'none') + xlab("Strategy") + ylab('Average Rating') +
expand_limits(y=c(1,5))
ggplot(d1[3:6,], aes(names, Mean, fill = names)) + geom_bar(stat='identity') +
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean + SE), width = .2, position=position_dodge(.9)) +
theme_minimal() + theme(legend.position = 'none') + xlab("Strategy") + ylab('Average Rating') +
expand_limits(y=c(1,5))
ggplot(d1, aes(names, Mean, fill = names)) + geom_bar(stat='identity') +
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean + SE), width = .2, position=position_dodge(.9)) +
theme_minimal() + theme(legend.position = 'none') + xlab("Strategy") + ylab('Average Rating') +
expand_limits(y=c(1,5)) + geom_vline(aes(xintercept=2.5))
# statistical tests
t.test(d0$gut, d0$math, paired = TRUE)
# statistical tests
gutvmath <- t.test(d0$gut, d0$math, paired = TRUE)
View(d0)
library(tidyr)
View(d0)
View(d1)
d2 <- gather(d0, question, rating, win.money:lose.likely, factor_key = TRUE)
View(d2)
View(d2)
d2 <- gather(d0, question, rating, win.money:lose.likely, factor_key = TRUE)[,c(1:2, 5:6)]
strsplit(d2$question, '.')
strsplit(d2$question, '\.')
strsplit(d2$question, '[.]')
strsplit(as.character(d2$question), '[.]')
strsplit(as.character(d2$question), '[.]')[1]
strsplit(as.character(d2$question), '[.]')[[]][1]
d3 <- strsplit(as.character(d2$question), '[.]')
View(d3)
d3 <- as.dataframe(strsplit(as.character(d2$question), '[.]'))
d3 <- as.data.frame(strsplit(as.character(d2$question), '[.]'))
View(d3)
d3 <- as.data.frame(t(strsplit(as.character(d2$question), '[.]')))
View(d3)
d3 <- as.data.frame(strsplit(as.character(d2$question), '[.]'))
View(d3)
d3 <- t(as.data.frame(strsplit(as.character(d2$question), '[.]')))
View(d3)
View(d2)
d3 <- cbind(d2, t(as.data.frame(strsplit(as.character(d2$question), '[.]'))))
View(d3)
colnames(d3)
colnames(d3) <- c( "ID", "Age", "question","rating","valence", "parameter")
View(d3)
rownames(d3) <- NULL
d3 <- data.frame(d3)
View(d3)
d3 <- as.data.frame(d3)
install.packages('ezANOVA')
install.packages('ez')
library(ez)
View(d3)
ezANOVA(d3, dv = rating, wid = ID, within = c(valence, parameter), detailed = FALSE, type = 2)
View(d3)
ezANOVA(d3, dv = 'rating', wid = 'ID', within = c('valence', 'parameter'),
detailed = FALSE, type = 2)
ezANOVA(d2, dv = 'rating', wid = 'ID', within = c(question),
detailed = FALSE, type = 2)
View(d2)
View(d0)
View(d2)
ezANOVA(d2, dv = 'rating', wid = c'ID', within = 'question',
detailed = FALSE, type = 2)
ezANOVA(d2, dv = 'rating', wid = c'ID', within = 'question', detailed = FALSE, type = 2)
ezANOVA(d2, dv = 'rating', wid = 'ID', within = 'question', detailed = FALSE, type = 2)
library(car)
View(d3)
Anova(rating ~ valence * parameter, d3)
Anova(rating ~ valence * parameter, data = d3)
aov(rating ~ valence * parameter + Error(ID), data = d3)
valvparam <- aov(rating ~ valence * parameter + Error(ID), data = d3)
summary(valvparam)
# load required packages
library(here)
library(ggplot2)
library(matrixStats)
library(tidyr)
# load source functions
source(here('scr', 'isolate_skew.R'))
source(here('scr', 'multiplot.R'))
source(here('scr', 'colorize_variable.R'))
source(here('scr', 'SummarySE.R'))
# load data
dt <- read.csv(here("data", "bound_skew1_data.csv"))
# separate strategy
d0 <- isolate_skew(dt,c(1,2),70:75)
colnames(d0) <- c('ID', 'Age', 'gut', 'math', 'win.money', 'lose.money', 'win.likely', 'lose.likely')
# Graph means
d1 <- cbind(colMeans(d0), apply(d0, 2, sd), apply(d0, 2, sd)/sqrt(nrow(d0)))
d1 <- d1[3:nrow(d1),]
colnames(d1) <- c('Mean', 'SD', 'SE')
names <- rownames(d1); rownames(d1) <- NULL
d1 <- cbind(names, d1)
d1 <- data.frame(d1)
d1$Mean <- as.numeric(as.character(d1$Mean))
d1$SD <- as.numeric(as.character(d1$SD))
d1$SE <- as.numeric(as.character(d1$SE))
d1$names <- factor(d1$names, levels = c('gut', 'math', 'win.money', 'lose.money',
'win.likely', 'lose.likely'))
ggplot(d1, aes(names, Mean, fill = names)) + geom_bar(stat='identity') +
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean + SE), width = .2, position=position_dodge(.9)) +
theme_minimal() + theme(legend.position = 'none') + xlab("Strategy") + ylab('Average Rating') +
expand_limits(y=c(1,5)) + geom_vline(aes(xintercept=2.5))
# statistical tests
# compare gut vs mathematical strategy
gutvmath <- t.test(d0$gut, d0$math, paired = TRUE)
# compare aspects of gamble
d2 <- gather(d0, question, rating, win.money:lose.likely, factor_key = TRUE)[,c(1:2, 5:6)]
d3 <- cbind(d2, t(as.data.frame(strsplit(as.character(d2$question), '[.]'))))
colnames(d3) <- c( "ID", "Age", "question","rating","valence", "parameter")
rownames(d3) <- NULL
View(gutvmath)
gutvmath
gutvmath$statistic
gutvmath$parameter
gutvmath$p.value
View(gutvmath)
saveRDS(gutvmath, here('output', 'gutvmath1.RDS'))
# compare aspects of gamble
d2 <- gather(d0, question, rating, win.money:lose.likely, factor_key = TRUE)[,c(1:2, 5:6)]
d3 <- cbind(d2, t(as.data.frame(strsplit(as.character(d2$question), '[.]'))))
colnames(d3) <- c( "ID", "Age", "question","rating","valence", "parameter")
rownames(d3) <- NULL
valvparam <- aov(rating ~ valence * parameter + Error(ID), data = d3)
summary(valvparam)
saveRDS(valvparam, here('output', 'valvparam1.RDS'))
valvparam$Within
valvparam$`(Intercept)`
summary(valvparam)
summary(valvparam)[1]
summary(valvparam)[2]
summary(valvparam)[3]
valvparam[2]
valvparam[3]
valvparam[4]
summary(valvparam)[3]
summary(valvparam)[4]
summary(valvparam)[2]
summary(valvparam)[2][1]
summary(valvparam)[2][[1]]
summary(valvparam)[2][[1]][1]
summary(valvparam)[2][[1]][[1]]
summary(valvparam)[2][[1]][[1]][[1]]
summary(valvparam)[2][[1]][[1]][[1]][4]
summary(valvparam)[2][[1]][[1]][[2]][4]
summary(valvparam)[2][[1]][[1]][[2]]
summary(valvparam)[2][1]
summary(valvparam)[2][1][1][2][4]
summary(valvparam)[2][[1]][[1]][[2]][4]
# load required packages
library(here)
# load source functions
source(here('scr', 'isolate_skew.R'))
# load data
dt <- read.csv(here("data", "bound_skew1_data.csv"))
# separate strategy
d0 <- isolate_skew(dt,c(1,2),70:75)
colnames(d0) <- c('ID', 'Age', 'gut', 'math', 'win.money', 'lose.money', 'win.likely', 'lose.likely')
# load required packages
library(here)
# load source functions
source(here('scr', 'isolate_skew.R'))
# load data
dt <- read.csv(here("data", "bound_skew1_data.csv"))
# separate skew
d0 <- isolate_skew(dt,c(1,2),10:69)
d1 <- clean_skew2(d0)
#recode response to acceptance
d1$accept <- d1$response - 1
# add skew count variable
d2 <-count_skew(d1)
d2$skew_count_f <- ordered(d2$skew_count,
levels= c('0','1','2','3','4','5','6','7','8','9','10'))
source(here('scr', 'clean_skew.R'))
source(here('scr', 'count_skew.R'))
d1 <- clean_skew2(d0)
#recode response to acceptance
d1$accept <- d1$response - 1
# add skew count variable
d2 <-count_skew(d1)
d2$skew_count_f <- ordered(d2$skew_count,
levels= c('0','1','2','3','4','5','6','7','8','9','10'))
View(d2)
# individual difference analysis
# 10.31.19 KLS
# load required packages
library(here)
# load source functions
source(here('scr', 'isolate_skew.R'))
source(here('scr', 'clean_skew.R'))
source(here('scr', 'count_skew.R'))
# set hard-coded variables
# load data
dt <- read.csv(here("data", "bound_skew1_data.csv"))
# separate skew
d0 <- isolate_skew(dt,c(1,2),10:69)
d1 <- clean_skew2(d0)
#recode response to acceptance
d1$accept <- d1$response - 1
# add skew count variable
d2 <-count_skew(d1)
rm(d0, d1)
# separate strategy
d0 <- isolate_skew(dt,c(1,2),70:75)
colnames(d0) <- c('ID', 'Age', 'gut', 'math', 'win.money', 'lose.money', 'win.likely', 'lose.likely')
View(d2)
View(d2)
# merge data frames
merge(d2,d0, by = 'ID')
# merge data frames
d3 <- merge(d2,d0, by = 'ID')
View(d3)
rm(d0,d2)
d3 <- d3[c(1,5,2:4,6:11)]
cor(d3[5:11])
d3$skew_count <- as.integer(as.character(d3$skew_count))
cor(d3[5:11])
library(Hmisc)
rcorr(d3[5:11])
rcorr(as.matrix(d3[5:11]))
lm(skew_count ~ gut + valence + magnitude, data = d3)
m1 <- lm(skew_count ~ gut + valence + magnitude, data = d3)
summary(m1)
m2 <- lm(skew_count ~ win.money + valence + magnitude, data = d3)
summary(m2)
View(d3)
m3 <- lm(skew_count ~ lose.money + valence + magnitude, data = d3)
summary(m3)
m4 <- lm(skew_count ~ lose.likely + valence + magnitude, data = d3)
summary(m1)
summary(m4)
s1_corr
# correlations
s1_corr <- rcorr(as.matrix(d3[5:11]))
# correlations
s1_corr <- rcorr(as.matrix(d3[5:11]))
s1_corr
saveRDS(s1_corr, here('output', 's1.corr.RDS'))
saveRDS(s1_corr, here('output', 's1.corr.RDS'))
saveRDS(s1_corr, here('output', 's1_corr.RDS'))
s1_corr$r
s1_corr$r[2]
s1_corr$p[2]
s1_corr$p[2]
s1_corr$P[2]
source('~/github/boundSkew1/06_graph_strategy.R', echo=TRUE)
ggsave('strategy1.pdf', path = 'output/strategy1.pdf')
ggsave('strategy1.pdf', path = 'figs/')
ggplot(d1, aes(names, Mean, fill = names)) + geom_bar(stat='identity') +
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean + SE), width = .2, position=position_dodge(.9)) +
theme_minimal() + theme(legend.position = 'none') + xlab("Strategy") + ylab('Average Rating') +
expand_limits(y=c(1,5)) + geom_vline(aes(xintercept=2.5))
ggsave('strategy1.pdf', path = 'figs/')
# graph skew data
# 6.10.19 KLS
# load required packages
library(here)
library(ggplot2)
# load source functions
source(here('scr', 'isolate_skew.R'))
source(here('scr', 'clean_skew.R'))
source(here('scr', 'SummarySE.R'))
# set hard-coded variables
# load data
dt <- read.csv(here("data", "bound_skew1_data.csv"))
# separate skew
d0 <- isolate_skew(dt,c(1,2),10:69)
d1 <- clean_skew(d0)
# recode response to acceptance
d1$accept <- d1$response - 1
# reorder deg_skew factor
d1$deg_skew <- factor(d1$deg_skew, levels = c('Symmetric', 'Weak', 'Moderate', 'Strong'))
# make magnitude a factor
d1$magnitude <- factor(d1$magnitude)
# age effects on acceptance rates
ggplot(d1, aes(Age, accept, colour = deg_skew, fill = deg_skew)) + geom_smooth(method=lm) +
theme(legend.position = 'top') + facet_grid(magnitude ~ valence)
# create summary - main effect of degree of skewness
d2 <- summarySE(data=d1, measurevar = 'accept', groupvars='deg_skew')
ggplot(d2, aes(deg_skew, accept, fill = deg_skew)) + geom_bar(position=position_dodge(), stat='identity') +
geom_errorbar(aes(ymin=accept - se, ymax = accept + se), width = .2, position=position_dodge(.9)) +
theme(legend.position = 'none') + theme_minimal() + guides(fill=FALSE) + xlab('Degree of Skewness') +
ylab('Acceptance Rate')
ggsave("deg_skew_plot1.pdf", plot = last_plot(), device="pdf", path="figs/")
# individual difference analysis
# 10.31.19 KLS
# load required packages
library(here)
library(Hmisc)
# load source functions
source(here('scr', 'isolate_skew.R'))
source(here('scr', 'clean_skew.R'))
source(here('scr', 'count_skew.R'))
# set hard-coded variables
# load data
dt <- read.csv(here("data", "bound_skew1_data.csv"))
# separate skew
d0 <- isolate_skew(dt,c(1,2),10:69)
d1 <- clean_skew2(d0)
#recode response to acceptance
d1$accept <- d1$response - 1
# add skew count variable
d2 <-count_skew(d1)
rm(d0, d1)
# separate strategy
d0 <- isolate_skew(dt,c(1,2),70:75)
colnames(d0) <- c('ID', 'Age', 'gut', 'math', 'win.money', 'lose.money', 'win.likely', 'lose.likely')
# merge data frames
d3 <- merge(d2,d0, by = 'ID')
d3 <- d3[c(1,5,2:4,6:11)]
d3$skew_count <- as.integer(as.character(d3$skew_count))
rm(d0,d2)
# correlations
s1_corr <- rcorr(as.matrix(d3[5:11]))
View(d3)
# models
d3$magval <- interaction(d3$magnitude, d3$valence)
View(d3)
m1 <- lm(skew_count ~ gut + magval, data = d3)
summary(m1)
m2 <- lm(skew_count ~ win.money + magval, data = d3)
summary(m2)
m3 <- lm(skew_count ~ lose.money + magval, data = d3)
summary(m3)
m4 <- lm(skew_count ~ lose.likely + magval, data = d3)
summary(m4)
View(d3)
m5 <- lm(skew_count ~ math + magval, data = d3)
summary(m5)
m6 <- lm(skew_count ~ win.likely + magval, data = d3)
summary(m6)
