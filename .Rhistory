summary(b1.1, correlation = FALSE)
## boundary fit - add age
m1 <- glmer(accept ~ deg_skew * Age + (1 | ID), data = d2, family = binomial(link = logit), nAGQ = 1,
control=glmerControl(optimizer='bobyqa'))
summary(m1, correlation = FALSE)
View(d2)
# compare symmetric to 25%/75% gamble
d2[which(d2$gamble == 'X0_25_75' | d2$gamble == 'X0_50)50'), ]
# compare symmetric to 25%/75% gamble
d3 <- d2[which(d2$gamble == 'X0_25_75' | d2$gamble == 'X0_50)50'), ]
View(d3)
# compare symmetric to 25%/75% gamble
d3 <- d2[which(d2$gamble == 'X0_25_75' & d2$gamble == 'X0_50)50'), ]
# compare symmetric to 25%/75% gamble
d3 <- d2[which(d2$gamble == 'X0_25_75' | d2$gamble == 'X0_50_50'), ]
View(d3)
# load required packages
library(here)
library(lme4)
library(gdata)
library(tidyr)
library(rlist)
# load source functions
source(here::here('scr', 'isolate_skew.R'))
source(here::here('scr', 'clean_skew.R'))
source(here::here('scr', 'SummarySE.R'))
source(here::here('scr', 'pairedttable.R'))
# load data
dt <- read.csv(here::here("data", "bound_skew1_data.csv"))
# separate skew
d0 <- isolate_skew(dt,c(1,2),10:69)
d1 <- clean_skew(d0)
# recode response to acceptance
d1$accept <- d1$response - 1
# reorder deg_skew factor
d1$deg_skew <- factor(d1$deg_skew, levels = c('Symmetric', 'Weak', 'Moderate', 'Strong'))
# reorder valence factor
d1$valence <- factor(d1$valence, levels = c('neutral', 'gain', 'loss'))
# make magnitude a factor
d1$magnitude <- factor(d1$magnitude, levels = c('0', '0.5', '5'))
# make interaction term
d1$magval <- interaction(d1$valence, d1$magnitude)
d1$magval <- drop.levels(d1$magval)
d1$magval <- factor(d1$magval, levels = c('neutral.0', 'loss.5', 'loss.0.5', 'gain.0.5', 'gain.5'))
# limit to only participants in the EV = 0 condition
d2 <- d1[which(d1$magnitude == 0),]
d2$ID <- factor(d2$ID)
ev0_m_age <- mean(d2$Age)
ev0_hist_age <- hist(d2[which(d2$deg_skew == 'Symmetric'),]$Age) # limits to one line per particiapnt
mean(d2$Age)
unique(d2$ID)
count(unique(d2$ID))
length(unique(d2$ID))
# scale and center age
d2$Age <- scale(d2$Age)
# baseline - only degree of skew
b1 <- glmer(accept ~ deg_skew + (1 + Age | ID), data = d1, family = binomial(link = logit), nAGQ = 1,
control=glmerControl(optimizer='bobyqa'))
## boundary fit - remove age from random effects
b1.1 <- glmer(accept ~ deg_skew + (1 | ID), data = d2, family = binomial(link = logit), nAGQ = 1,
control=glmerControl(optimizer='bobyqa'))
summary(b1.1, correlation = FALSE)
## boundary fit - add age
m1 <- glmer(accept ~ deg_skew * Age + (1 | ID), data = d2, family = binomial(link = logit), nAGQ = 1,
control=glmerControl(optimizer='bobyqa'))
summary(m1, correlation = FALSE)
View(d2)
View(d2)
# limit only to 75/25 gamble
d3 <- d2[which(d2$gamble == 'X0_25_75'),]
# scale and center age
d3$Age <- scale(d3$Age)
# baseline - only degree of skew
b1 <- glmer(accept ~ deg_skew + (1 + Age | ID), data = d3, family = binomial(link = logit), nAGQ = 1,
control=glmerControl(optimizer='bobyqa'))
## boundary fit - remove age from random effects
b1.1 <- glmer(accept ~ deg_skew + (1 | ID), data = d3, family = binomial(link = logit), nAGQ = 1,
control=glmerControl(optimizer='bobyqa'))
# Aging Follow-Up Analysis
# 4.3.20 KLS
# load required packages
library(here)
library(lme4)
library(gdata)
library(tidyr)
library(rlist)
# load source functions
source(here::here('scr', 'isolate_skew.R'))
source(here::here('scr', 'clean_skew.R'))
source(here::here('scr', 'SummarySE.R'))
source(here::here('scr', 'pairedttable.R'))
# set hard-coded variables
# load data
dt <- read.csv(here::here("data", "bound_skew1_data.csv"))
# separate skew
d0 <- isolate_skew(dt,c(1,2),10:69)
d1 <- clean_skew(d0)
# recode response to acceptance
d1$accept <- d1$response - 1
# reorder deg_skew factor
d1$deg_skew <- factor(d1$deg_skew, levels = c('Symmetric', 'Weak', 'Moderate', 'Strong'))
# reorder valence factor
d1$valence <- factor(d1$valence, levels = c('neutral', 'gain', 'loss'))
# make magnitude a factor
d1$magnitude <- factor(d1$magnitude, levels = c('0', '0.5', '5'))
# make interaction term
d1$magval <- interaction(d1$valence, d1$magnitude)
d1$magval <- drop.levels(d1$magval)
d1$magval <- factor(d1$magval, levels = c('neutral.0', 'loss.5', 'loss.0.5', 'gain.0.5', 'gain.5'))
# limit to only participants in the EV = 0 condition
d2 <- d1[which(d1$magnitude == 0),]
d2$ID <- factor(d2$ID)
ev0_m_age <- mean(d2$Age)
ev0_hist_age <- hist(d2[which(d2$deg_skew == 'Symmetric'),]$Age) # limits to one line per particiapnt
# scale and center age
d2$Age <- scale(d2$Age)
# baseline - only degree of skew
b1 <- glmer(accept ~ deg_skew + (1 + Age | ID), data = d1, family = binomial(link = logit), nAGQ = 1,
control=glmerControl(optimizer='bobyqa'))
# model doesn't converge
#summary(b1, correlation = FALSE)
## boundary fit - remove age from random effects
b1.1 <- glmer(accept ~ deg_skew + (1 | ID), data = d2, family = binomial(link = logit), nAGQ = 1,
control=glmerControl(optimizer='bobyqa'))
summary(b1.1, correlation = FALSE)
#saveRDS(b1.1, here::here('output', 'baseline.RDS'))
## boundary fit - add age
m1 <- glmer(accept ~ deg_skew * Age + (1 | ID), data = d2, family = binomial(link = logit), nAGQ = 1,
control=glmerControl(optimizer='bobyqa'))
summary(m1, correlation = FALSE)
# compare symmetric to 25%/75% gamble
d3 <- d2[which(d2$gamble == 'X0_25_75'),]
d4 <- d2[which(d2$gamble == 'X0_50_50'), ]
View(d3)
t.test(d3$response, d4$response, paired = TRUE)
dd <- read.csv(here("data", "bound_skew1_data_dictionary.csv"))
source('~/.active-rstudio-document', echo=TRUE)
# add and populate variable names column
dd[,'Variable Names'] <- NA
View(dd)
dd$Variable[1:7]
as.characeter(dd$Variable[1:7])
as.character(dd$Variable[1:7])
dd$`Variable Names` <- as.character(dd$Variable[1:7])
dd$`Variable Names`[1:7] <- as.character(dd$Variable[1:7])
View(dd)
dd$`Variable Names`[1:9] <- c(as.character(dd$Variable[1:7]), 'Practice 1', 'Practice 2')
View(dd)
View(dd)
strsplit(dd$Variable[10])
strsplit(dd$Variable[10], '_')
strsplit(dd$Variable[10], '\_')
strsplitas.charcter(dd$Variable[10]), '_')
strsplit(as.charcter(dd$Variable[10]), '_'))
dd$Variable[10]
as.charcter(dd$Variable[10])
strsplit(as.character(dd$Variable[10]), '_'))
strsplit(as.character(dd$Variable[10]), '_')
View(dd)
for [x] in dd$Variable[10:19] {
print(x)
}
for (x) in dd$Variable[10:19] {
print(x)
}
dd$Variable[10:19]
as.character(dd$Variable[10:19])
for (x) in as.character(dd$Variable[10:19]) {
print(x)
}
for (x in as.character(dd$Variable[10:19])) {
print(x)
}
for (x in as.character(dd$Variable[10:19])) {
a <- strsplit(x, '_')
}
a
:
for (x in as.character(dd$Variable[10:19])) {
a <- strsplit(x, '_')
print(a[1])
}
for (x in as.character(dd$Variable[10:19])) {
a <- strsplit(x, '_')
print(a[1][[1]])
}
for (x in as.character(dd$Variable[10:19])) {
a <- strsplit(x, '_')
print(a)
}
for (x in as.character(dd$Variable[10:19])) {
a <- strsplit(x, '_')
print(a[[1]][1])
}
View(dd)
for (x in as.character(dd$Variable[10:19])) {
a <- strsplit(x, '_')
b <- paste0(a[[1]][1], 'EV_', a[[1]][2], '_', a[[1]][3], 'gamble')
print(b)
}
for (x in as.character(dd$Variable[10:19])) {
a <- strsplit(x, '_')
b <- paste0(sub('X', '', a[[1]][1]), 'EV_', a[[1]][2], '_', a[[1]][3], 'gamble')
print(b)
}
for (x in as.character(dd$Variable[10:19])) {
a <- strsplit(x, '_')
b <- paste0(sub('X', '', a[[1]][1]), '_EV_', a[[1]][2], '_', a[[1]][3], '_gamble')
print(b)
}
for (x in as.character(dd$Variable[10:19])) {
a <- strsplit(x, '_')
b <- paste0(sub('X', '', a[[1]][1]), '_EV_', a[[1]][2], '_', a[[1]][3], '_Gamble')
print(b)
}
for (x in 1: length(as.character(dd$Variable[10:19]))) {
print(x)
#a <- strsplit(x, '_')
#b <- paste0(sub('X', '', a[[1]][1]), '_EV_', a[[1]][2], '_', a[[1]][3], '_Gamble')
}
for (x in 1: length(as.character(dd$Variable[10:19]))) {
print(x)
y <- as.character(dd$Variable[10:19])))[x]
print(y)
#a <- strsplit(x, '_')
#b <- paste0(sub('X', '', a[[1]][1]), '_EV_', a[[1]][2], '_', a[[1]][3], '_Gamble')
}
y <- as.character(dd$Variable[10:19])[x]
for (x in 1: length(as.character(dd$Variable[10:19]))) {
print(x)
y <- as.character(dd$Variable[10:19])[x]
print(y)
#a <- strsplit(x, '_')
#b <- paste0(sub('X', '', a[[1]][1]), '_EV_', a[[1]][2], '_', a[[1]][3], '_Gamble')
}
c <- rep(NA, 10)
b <- rep(NA, 10)
for (x in 1: length(as.character(dd$Variable[10:19]))) {
print(x)
y <- as.character(dd$Variable[10:19])[x]
print(y)
a <- strsplit(y, '_')
b[x] <- paste0(sub('X', '', a[[1]][1]), '_EV_', a[[1]][2], '_', a[[1]][3], '_Gamble')
}
dd$`Variable Names`[10:19] <- b
View(dd)
dd$Variable[10:19]
a = dd$Variable[10:19]
a
a = as.character(dd$Variable[10:19])
View(dd)
a = 10:19, b = 22:31, c = 34:43, d = 46.55, e = 58:67
a = (10:19)
list(a = (10:19), b = (22:31), c = (34:43), d = 46:55), e = (58:67))
a = (10:19)
list(a = (10:19), b = (22:31), c = (34:43), d = (46:55), e = (58:67))
gambles <- list(a = (10:19), b = (22:31), c = (34:43), d = (46:55), e = (58:67))
print(g)
gambles <- list(a = (10:19), b = (22:31), c = (34:43), d = (46:55), e = (58:67))
for (g in 1:length(gambles)){
print(g)
}
gambles$g
gambles[1]
for (g in 1:length(gambles)){
print(gambles[1])
}
print(gambles[g])
for (g in 1:length(gambles)){
print(gambles[g])
}
print(gambles[g])[1]
print(gambles[g])[[1]]
for (g in 1:length(gambles)){
#print(gambles[g])[[1]]
print(length(gambles[g]))
}
for (g in 1:length(gambles)){
#print(gambles[g])[[1]]
print(length(gambles[g][1]))
}
#print(gambles[g])[[1]]
print(length(gambles[g][[1]]))
b <- rep(NA, length(gambles[g][[1]]))
for (g in 1:length(gambles)){
print(length(gambles[g][[1]]))
b <- rep(NA, length(gambles[g][[1]]))
}
for (g in 1:length(gambles)){
print(g)
b <- rep(NA, length(gambles[g][[1]]))
for (x in 1:length(gambles[g][[1]])){
print(dd$variable[x])
}
}
for (g in 1:length(gambles)){
print(g)
b <- rep(NA, length(gambles[g][[1]]))
for (x in 1:length(gambles[g][[1]])){
pring(x)
}
}
for (g in 1:length(gambles)){
print(g)
b <- rep(NA, length(gambles[g][[1]]))
for (x in 1:length(gambles[g][[1]])){
print(x)
}
}
for (g in 1:length(gambles)){
print(g)
b <- rep(NA, length(gambles[g][[1]]))
for (x in 1:length(gambles[g][[1]])){
print(x)
y <- as.character(dd$Variable[x])
print(y)
}
}
for (g in 1:length(gambles)){
print(g)
b <- rep(NA, length(gambles[g][[1]]))
for (x in 1:length(gambles[g][[1]])){
print(x)
y <- gambles[g][[x]]
z <- as.character(dd$Variable[x])
#print(y)
}
}
for (g in 1:length(gambles)){
print(g)
b <- rep(NA, length(gambles[g][[1]]))
for (x in 1:length(gambles[g][[1]])){
print(x)
y <- gambles[g][[1]][x]
z <- as.character(dd$Variable[x])
#print(y)
}
}
for (g in 1:length(gambles)){
print(g)
b <- rep(NA, length(gambles[g][[1]]))
for (x in 1:length(gambles[g][[1]])){
print(x)
y <- gambles[g][[1]][x]
z <- as.character(dd$Variable[y])
print(y)
}
}
for (g in 1:length(gambles)){
print(g)
b <- rep(NA, length(gambles[g][[1]]))
for (x in 1:length(gambles[g][[1]])){
print(x)
y <- gambles[g][[1]][x]
z <- as.character(dd$Variable[y])
print(z)
}
}
for (g in 1:length(gambles)){
print(g)
b <- rep(NA, length(gambles[g][[1]]))
for (x in 1:length(gambles[g][[1]])){
print(x)
y <- gambles[g][[1]][x]
z <- as.character(dd$Variable[y])
a <- strsplit(z, '_')
print(a)
}
}
for (g in 1:length(gambles)){
print(g)
b <- rep(NA, length(gambles[g][[1]]))
for (x in 1:length(gambles[g][[1]])){
print(x)
y <- gambles[g][[1]][x]
z <- as.character(dd$Variable[y])
a <- strsplit(z, '_')
b[x] <- paste0(sub('X', '', a[[1]][1]), '_EV_', a[[1]][2], '_', a[[1]][3], '_Gamble')
print(b)
}
}
for (g in 1:length(gambles)){
)
for (g in 1:length(gambles)){
b <- rep(NA, length(gambles[g][[1]]))
for (x in 1:length(gambles[g][[1]])){
print(x)
y <- gambles[g][[1]][x]
z <- as.character(dd$Variable[y])
a <- strsplit(z, '_')
b[x] <- paste0(sub('X', '', a[[1]][1]), '_EV_', a[[1]][2], '_', a[[1]][3], '_Gamble')
}
dd$`Variable Names`[gambles[g][[1]] <- b
}
b <- rep(NA, 10)
for (x in 1: length(as.character(dd$Variable[10:19]))) {
print(x)
y <- as.character(dd$Variable[10:19])[x]
print(y)
a <- strsplit(y, '_')
b[x] <- paste0(sub('X', '', a[[1]][1]), '_EV_', a[[1]][2], '_', a[[1]][3], '_Gamble')
}
dd$`Variable Names`[10:19] <- b
View(dd)
gambles[g][[1]
]
for (g in 1:length(gambles)){
print(g)
b <- rep(NA, length(gambles[g][[1]]))
for (x in 1:length(gambles[g][[1]])){
print(x)
y <- gambles[g][[1]][x]
z <- as.character(dd$Variable[y])
a <- strsplit(z, '_')
b[x] <- paste0(sub('X', '', a[[1]][1]), '_EV_', a[[1]][2], '_', a[[1]][3], '_Gamble')
}
dd$`Variable Names`[gambles[g][[1]]] <- b
}
View(dd)
View(dd)
dd$`Variable Names`[c(20:21, 33:34, 44:45, 56:57, 68:69)] <- paste0('Catch_', rep(1,10))
View(dd)
dd$`Variable Names`[c(20:21, 33:34, 44:45, 56:57, 68:69)] <- paste0('Catch_', seq(1,10))
View(dd)
dd$`Variable Names`[c(70:75)] <- paste0('Strategy_', seq(1,6))
length(76:93)
dd$`Variable Names`[c(76:93)] <- paste0('Real_World_', seq(1,18))
length(76:84)
dd$`Variable Names`[c(76:84)] <- paste0('Investment_', seq(1,9))
dd$`Variable Names`[c(85:93)] <- paste0('Fraud_', seq(1,9))
View(dd)
dd$`Variable Names`[c(94:117)] <- paste0('AVI_', seq(1,24))
dd$`Variable Names`[c(94:117)] <- paste0('AVI_', seq(1,24))
dd$`Variable Names`[c(118:132)] <- paste0('Numberacy_', seq(1,14))
dd$`Variable Names`[c(133:142)] <- paste0('Graph_Lit_', seq(1,10))
dd$`Variable Names`[143] <- 'DOB'
# load data
dt <- read.csv(here('data', 'boundskew1raw.csv'))
# add id column
dt$ID <- c(0,0,seq(1,209,1))
# clean
dt <- dt[-c(1:2)]
dt <- dt[c(ncol(dt),1:(ncol(dt)-1))]
# create data dictionary
dd <- t(dt[1,])
dd <- cbind(rownames(dd), data.frame(dd, row.names = NULL))
colnames(dd) <- c('Variable', 'Question')
# finish cleaning
dt <- dt[-c(1:2),]
dt$Age <- as.integer(as.character(dt$Age))
dt$Age <- dt$Age + 19
View(dt)
grep('SC0', colnames(dt))
# load data
dt <- read.csv(here('data', 'boundskew1raw.csv'))
# add id column
dt$ID <- c(0,0,seq(1,209,1))
# clean
dt <- dt[-c(1:2, 144:ncol(dt))]
View(dt)
# load data
dt <- read.csv(here('data', 'boundskew1raw.csv'))
View(dt)
View(dt)c(1:2, 144:ncol(dt)-1)
c(1:2, 144:ncol(dt)-1)
c(1:2, 144:(ncol(dt)-1))
# clean
dt <- dt[-c(1:2, 144:(ncol(dt)-1))]
View(dt)
# load data
dt <- read.csv(here('data', 'boundskew1raw.csv'))
View(dt)
# add id column
dt$ID <- c(0,0,seq(1,209,1))
# clean
dt <- dt[-c(1:2, 144:(ncol(dt)-1))]
View(dt)
# load data
dt <- read.csv(here('data', 'boundskew1raw.csv'))
View(dt)
grep('Q245.1', colnames(dt))
# load data
dt <- read.csv(here('data', 'boundskew1raw.csv'))
# add id column
dt$ID <- c(0,0,seq(1,209,1))
# clean
dt <- dt[-c(1:2, 145:(ncol(dt)-1))]
dt <- dt[c(ncol(dt),1:(ncol(dt)-1))]
View(dt)
# create data dictionary
dd <- t(dt[1,])
dd <- cbind(rownames(dd), data.frame(dd, row.names = NULL))
colnames(dd) <- c('Variable', 'Question')
# finish cleaning
dt <- dt[-c(1:2),]
dt$Age <- as.integer(as.character(dt$Age))
dt$Age <- dt$Age + 19
write.csv(dd, here("data", "bound_skew1_data_dictionary.csv"), row.names = FALSE)
write.csv(dt, here("data", "bound_skew1_data.csv"), row.names = FALSE)
View(dd)
source('~/github/boundSkew1/12_complete_data_dictionary.R', echo=TRUE)
View(dd)
# add measurement units
dd$`Measurement Units` <- sapply(dt, class)
View(dd)
# Create and populate allowed_values in data dictionary
dd[,'Allowed Values'] <- NA
View(dt)
dd$`Measurement Units`[143] <- 'mm/dd/yyyy'
View(dd)
source('~/github/boundSkew1/12_complete_data_dictionary.R', echo=TRUE)
rm(a, b, g, x, y, z)
